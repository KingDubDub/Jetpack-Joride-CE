	section	.text,"ax",@progbits
	assume	adl = 1
	section	.text,"ax",@progbits
	public	_delObjects
_delObjects:
	ld	hl, _coin_max
	ld	bc, 0
	ld	iy, _coinX
	ld	a, (_coinFormation)
	ld	de, 0
	ld	e, a
	add	hl, de
	ld	a, (hl)
	ld	e, a
BB0_1:
	push	de
	pop	hl
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	z, BB0_2
	ld	hl, 2000
	ld	(iy), hl
	dec	de
	lea	iy, iy + 3
	jq	BB0_1
BB0_2:
	ld	de, 3
	ld	iy, _zapperX
BB0_4:
	push	bc
	pop	hl
	or	a, a
	sbc	hl, de
	jq	z, BB0_6
	ld	hl, _zapperLength
	add	hl, bc
	ld	(hl), 0
	ld.sis	hl, 331
	ld	(iy), l
	ld	(iy + 1), h
	inc	bc
	lea	iy, iy + 2
	jq	BB0_4
BB0_6:
	ld.sis	hl, 1467
	ld	iy, _missileX
	ld	(iy), l
	ld	(iy + 1), h
	xor	a, a
	ld	(_laserX), a
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_main
_main:
	ld	hl, -27
	call	__frameset
	ld	iy, 0
	ld	e, 10
	ld	(ix + -17), e
	ld	(ix + -16), d
	ld	de, 9
BB1_1:
	lea	hl, iy + 0
	or	a, a
	sbc	hl, de
	jq	z, BB1_3
	ld	hl, _malloc
	push	hl
	ld	hl, 18
	push	hl
	push	hl
	ld	(ix + -3), iy
	call	_gfx_AllocSprite
	pop	de
	pop	de
	pop	de
	ld	de, (ix + -3)
	ld	iy, _zapper_tiles_flipped
	add	iy, de
	ld	(iy), hl
	ld	iy, _zapper_tiles_data
	add	iy, de
	ld	de, (iy)
	push	hl
	push	de
	call	_gfx_FlipSpriteX
	ld	iy, (ix + -3)
	pop	hl
	pop	hl
	ld	de, 3
	add	iy, de
	ld	de, 9
	jq	BB1_1
BB1_3:
	ld	de, 24
	ld	iy, 0
BB1_4:
	lea	hl, iy + 0
	or	a, a
	sbc	hl, de
	jq	z, BB1_6
	ld	hl, _malloc
	push	hl
	ld	hl, 32
	push	hl
	push	hl
	ld	(ix + -3), iy
	call	_gfx_AllocSprite
	pop	de
	pop	de
	pop	de
	ld	de, (ix + -3)
	ld	iy, _electric_animation
	add	iy, de
	ld	(iy), hl
	ld	iy, (ix + -3)
	ld	de, 3
	add	iy, de
	ld	de, 24
	jq	BB1_4
BB1_6:
	or	a, a
	sbc	hl, hl
	push	hl
	pop	iy
	ld	de, 9
BB1_7:
	lea	hl, iy + 0
	ld	bc, 6
	or	a, a
	sbc	hl, bc
	jq	z, BB1_9
	lea	de, iy + 0
	ld	(ix + -6), de
	ld	hl, _electric_tiles_data
	add	hl, de
	ld	hl, (hl)
	ld	(ix + -9), hl
	ld	bc, _electric_animation+6
	push	bc
	pop	hl
	add	hl, de
	ld	(ix + -3), hl
	ld	iy, (ix + -3)
	ld	bc, (ix + -9)
	ld	(iy + -6), bc
	ld	hl, (ix + -3)
	ld	de, (hl)
	push	de
	push	bc
	call	_gfx_FlipSpriteX
	pop	hl
	pop	hl
	ld	iy, (ix + -3)
	ld	hl, (iy + -6)
	ld	de, (iy + 6)
	push	de
	push	hl
	call	_gfx_FlipSpriteY
	pop	hl
	pop	hl
	ld	iy, (ix + -3)
	ld	hl, (iy + -6)
	ld	de, (iy + 12)
	push	de
	push	hl
	call	_gfx_RotateSpriteHalf
	ld	iy, (ix + -6)
	pop	hl
	pop	hl
	ld	de, 3
	add	iy, de
	ld	de, 9
	jq	BB1_7
BB1_9:
	ld	bc, 12
	ld	iy, 0
BB1_10:
	lea	hl, iy + 0
	or	a, a
	sbc	hl, bc
	jq	z, BB1_12
	ld	hl, _malloc
	push	hl
	ld	hl, 15
	push	hl
	ld	hl, 19
	push	hl
	ld	(ix + -3), iy
	call	_gfx_AllocSprite
	pop	de
	pop	de
	pop	de
	ld	de, (ix + -3)
	ld	iy, _powering_tiles_flipped
	add	iy, de
	ld	(iy), hl
	ld	iy, _powering_tiles_data
	add	iy, de
	ld	de, (iy)
	push	hl
	push	de
	call	_gfx_FlipSpriteY
	ld	iy, (ix + -3)
	ld	bc, 12
	pop	hl
	pop	hl
	ld	de, 3
	add	iy, de
	ld	de, 9
	jq	BB1_10
BB1_12:
	ld	iy, 0
BB1_13:
	lea	hl, iy + 0
	or	a, a
	sbc	hl, de
	jq	z, BB1_15
	ld	hl, _malloc
	push	hl
	ld	hl, 37
	push	hl
	ld	hl, 30
	push	hl
	ld	(ix + -3), iy
	call	_gfx_AllocSprite
	pop	de
	pop	de
	pop	de
	ld	de, (ix + -3)
	ld	iy, _firing_tiles_flipped
	add	iy, de
	ld	(iy), hl
	ld	iy, _firing_tiles_data
	add	iy, de
	ld	de, (iy)
	push	hl
	push	de
	call	_gfx_FlipSpriteY
	ld	iy, (ix + -3)
	pop	hl
	pop	hl
	ld	de, 3
	add	iy, de
	ld	de, 9
	jq	BB1_13
BB1_15:
	ld	iy, 0
BB1_16:
	lea	hl, iy + 0
	or	a, a
	sbc	hl, de
	jq	z, BB1_18
	ld	hl, _malloc
	push	hl
	ld	hl, 44
	push	hl
	ld	hl, 30
	push	hl
	ld	(ix + -3), iy
	call	_gfx_AllocSprite
	pop	de
	pop	de
	pop	de
	ld	de, (ix + -3)
	ld	iy, _shutdown_tiles_flipped
	add	iy, de
	ld	(iy), hl
	ld	iy, _shutdown_tiles_data
	add	iy, de
	ld	de, (iy)
	push	hl
	push	de
	call	_gfx_FlipSpriteY
	ld	iy, (ix + -3)
	pop	hl
	pop	hl
	ld	de, 3
	add	iy, de
	ld	de, 9
	jq	BB1_16
BB1_18:
	call	_gfx_Begin
	ld	hl, 1
	push	hl
	call	_gfx_SetDraw
	pop	hl
	or	a, a
	sbc	hl, hl
	push	hl
	ld	hl, 512
	push	hl
	ld	hl, _jetpack_palette
	push	hl
	call	_gfx_SetPalette
	pop	hl
	pop	hl
	pop	hl
	or	a, a
	sbc	hl, hl
	push	hl
	call	_gfx_SetTransparentColor
	pop	hl
	ld.sis	hl, 515
	ld	iy, -917456
	ld	(iy), l
	ld	(iy + 1), h
	ld	hl, -720896
	ld	a, (hl)
	or	a, 3
	ld	(hl), a
	ld	iy, _monies
	lea	hl, iy + 3
	ld	(ix + -23), hl
	ld	iy, _distance
	lea	hl, iy + 3
	ld	(ix + -20), hl
BB1_19:
	ld	a, 6
	ld	(_scrollSpeed), a
	ld.sis	hl, 0
	ld	iy, _incrementDelay
	ld	(iy), l
	ld	(iy + 1), h
	ld.sis	hl, 24
	ld	iy, _avatarX
	ld	(iy), l
	ld	(iy + 1), h
	ld	a, -71
	ld	(_avatarY), a
	ld	l, 0
	ld	a, l
	ld	(_holdTime), a
	ld	a, 18
	ld	(_exhaustAnimate), a
	ld	a, 1
	ld	(_health), a
	ld	de, 100
	ld	(_spawnDelay), de
	ld	de, 0
	ld	(_distance), de
	ld	a, l
	ld	(_distance+3), a
	ld	(_monies), de
	ld	(_monies+3), a
	ld	a, 7
	ld	(_deadLasers), a
	call	_delObjects
BB1_20:
	call	_kb_Scan
	ld	iy, (_backgroundScroll)
	ld	a, (_scrollSpeed)
	ld	de, 0
	ld	e, a
	lea	hl, iy + 0
	or	a, a
	sbc	hl, de
	ld	(ix + -3), hl
	ld	bc, 192
	add	iy, bc
	lea	hl, iy + 0
	or	a, a
	sbc	hl, de
	push	hl
	pop	iy
	ld	hl, (ix + -3)
	ld	bc, 1
	or	a, a
	sbc	hl, bc
	call	__setflag
	jq	m, BB1_22
	ld	iy, (ix + -3)
BB1_22:
	ld	(_backgroundScroll), iy
	ld	hl, _incrementDelay
	push	de
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	ld	iyl, e
	ld	iyh, d
	pop	de
	ex	de, hl
	ld	bc, 250
	call	__imulu
	ld	de, -1250
	add	hl, de
	cp	a, 12
	jq	nc, BB1_25
	ld	de, 0
	ld	e, iyl
	ld	d, iyh
	push	hl
	pop	bc
	ex	de, hl
	or	a, a
	sbc	hl, bc
	call	__setflag
	jq	m, BB1_25
	inc	a
	ld	(_scrollSpeed), a
	ld.sis	iy, 0
	jq	BB1_26
BB1_25:
	inc.sis	iy
BB1_26:
	ld	hl, _incrementDelay
	push	de
	ld	e, iyl
	ld	d, iyh
	ld	(hl), e
	inc	hl
	ld	(hl), d
	pop	de
	ld	de, (_spawnDelay)
	push	de
	pop	hl
	ld	bc, 1
	or	a, a
	sbc	hl, bc
	call	__setflag
	jq	p, BB1_31
	call	_random
	ld	bc, 22
	call	__iremu
	push	hl
	pop	de
	ld	a, e
	ld	(_randObject), a
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	nz, BB1_32
	call	_random
	push	hl
	pop	iy
	ld	(ix + -3), iy
	ld	bc, 5
	call	__iremu
	push	hl
	pop	de
	ld	a, e
	ld	(_laserFormation), a
	ld	hl, _laserMax
	add	hl, de
	ld	a, (hl)
	or	a, a
	sbc	hl, hl
	ld	l, a
	ld	(ix + -12), hl
	lea	hl, iy + 0
	call	__idivu
	push	hl
	pop	de
	or	a, a
	sbc	hl, hl
	or	a, a
	sbc	hl, de
	ld	bc, 35
	call	__imulu
	push	hl
	pop	de
	ld	hl, _lsrY
	push	hl
	pop	iy
	add	iy, de
	ld	hl, (ix + -3)
	ld	bc, 7
	call	__imulu
	push	hl
	pop	bc
	add	iy, bc
	ld	(ix + -3), iy
	ld	iy, _halfLife
	add	iy, de
	ld	de, (ix + -12)
	add	iy, bc
	lea	bc, iy + 0
	ld	hl, _laserY
	ld	(ix + -6), hl
	ld	hl, _laserLifetime
	ld	(ix + -9), hl
BB1_29:
	push	de
	pop	hl
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	z, BB1_36
	ld	hl, (ix + -3)
	ld	a, (hl)
	ld	hl, (ix + -6)
	ld	(hl), a
	push	bc
	pop	hl
	ld	a, (hl)
	or	a, a
	sbc	hl, hl
	ld	l, a
	ld	iy, (ix + -9)
	ld	(iy), hl
	dec	de
	lea	iy, iy + 3
	ld	(ix + -9), iy
	ld	hl, (ix + -6)
	inc	hl
	ld	(ix + -6), hl
	ld	hl, (ix + -3)
	inc	hl
	ld	(ix + -3), hl
	inc	bc
	jq	BB1_29
BB1_31:
	ld	iy, 0
	lea	bc, iy + 0
	ld	c, a
	ex	de, hl
	or	a, a
	sbc	hl, bc
	ld	(_spawnDelay), hl
	ld	hl, (_missileDelay)
	or	a, a
	sbc	hl, bc
	ld	(_missileDelay), hl
	jq	BB1_53
BB1_32:
	push	de
	pop	hl
	ld	bc, 3
	or	a, a
	sbc	hl, bc
	jq	nc, BB1_37
	call	_random
	ld	bc, 121
	call	__iremu
	ld	a, l
	add	a, 30
	ld	(_randVar), a
	call	_random
	push	hl
	pop	de
	ld	bc, 6
	call	__iremu
	ld	a, l
	ld	(_coinFormation), a
	ld	a, (_randVar)
	ld	(ix + -6), a
	push	de
	pop	hl
	call	__idivu
	push	hl
	pop	bc
	or	a, a
	sbc	hl, hl
	or	a, a
	sbc	hl, bc
	push	hl
	pop	iy
	ld	(ix + -3), iy
	ex	de, hl
	ld	bc, 30
	call	__imulu
	push	hl
	pop	de
	lea	hl, iy + 0
	ld	bc, 540
	call	__imulu
	push	hl
	pop	bc
	ld	iy, _ctx
	add	iy, bc
	push	de
	pop	hl
	ld	bc, 3
	call	__imulu
	push	hl
	pop	bc
	add	iy, bc
	ld	hl, (ix + -3)
	ld	bc, 180
	call	__imulu
	push	hl
	pop	bc
	ld	hl, _cty
	add	hl, bc
	add	hl, de
	ld	(ix + -9), hl
	ld	hl, _coinX
	ld	(ix + -3), hl
	ld	de, 0
BB1_34:
	push	de
	pop	hl
	ld	bc, 30
	or	a, a
	sbc	hl, bc
	jq	z, BB1_42
	ld	hl, (iy)
	ld	bc, 330
	add	hl, bc
	lea	bc, iy + 0
	ld	iy, (ix + -3)
	ld	(iy), hl
	ld	hl, (ix + -9)
	add	hl, de
	ld	a, (hl)
	add	a, (ix + -6)
	ld	hl, _coinY
	add	hl, de
	ld	(hl), a
	ld	hl, _coinAnimate
	add	hl, de
	ld	(hl), 0
	inc	de
	lea	iy, iy + 3
	ld	(ix + -3), iy
	push	bc
	pop	iy
	lea	iy, iy + 3
	jq	BB1_34
BB1_36:
	ld	a, 1
	ld	(_laserX), a
	xor	a, a
	ld	(_deadLasers), a
	ld	a, (_scrollSpeed)
	or	a, a
	sbc	hl, hl
	ld	l, a
	ld	bc, 40
	call	__imulu
	jq	BB1_43
BB1_37:
	push	de
	pop	hl
	ld	bc, 6
	or	a, a
	sbc	hl, bc
	jq	nc, BB1_45
	ld	a, 1
	ld	de, 0
BB1_39:
	push	de
	pop	bc
	bit	0, a
	jq	z, BB1_51
	push	bc
	pop	hl
	add	hl, hl
	ex	de, hl
	ld	iy, _missileX
	add	iy, de
	ld	l, (iy)
	ld	h, (iy + 1)
	ld.sis	de, 1467
	or	a, a
	sbc.sis	hl, de
	ld	a, 0
	ld	de, 1
	jq	c, BB1_39
	ld.sis	hl, 1466
	ld	(iy), l
	ld	(iy + 1), h
	ld	(ix + -3), bc
	call	_random
	ld	bc, 17
	call	__iremu
	ld	e, (ix + -17)
	ld	d, (ix + -16)
	ld	d, l
	ld	(ix + -17), e
	ld	(ix + -16), d
	ld	l, e
	ld	h, d
	mlt	hl
	ld	a, l
	add	a, 20
	ld	hl, _missileY
	ld	de, (ix + -3)
	add	hl, de
	ld	(hl), a
	xor	a, a
	ld	de, 4
	jq	BB1_39
BB1_42:
	ld	hl, 500
BB1_43:
	ld	(_spawnDelay), hl
BB1_44:
	ld	iy, 0
BB1_53:
	ld	a, (_health)
	cp	a, 1
	call	__setflag
	jq	m, BB1_62
	ld	hl, -720878
	push	de
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	ld	l, e
	ld	h, d
	pop	de
	ld	e, l
	ld	a, (_avatarY)
	ld	l, a
	bit	5, e
	jq	nz, BB1_63
	ld	a, l
	cp	a, -71
	jq	nc, BB1_58
	ld	a, (_holdTime)
	cp	a, -9
	call	__setflag
	jq	m, BB1_58
	dec	a
	ld	(_holdTime), a
BB1_58:
	ld	a, (_exhaustAnimate)
	cp	a, 7
	ld	e, 8
	jq	c, BB1_69
	ld	e, a
	inc	e
	cp	a, 11
	jq	c, BB1_69
	ld	e, 18
	jq	BB1_69
BB1_62:
	ld	a, (_avatarY)
	ld	l, a
	jq	BB1_74
BB1_63:
	ld	a, l
	cp	a, 21
	jq	c, BB1_66
	ld	a, (_holdTime)
	cp	a, 12
	call	__setflag
	jq	p, BB1_66
	inc	a
	ld	(_holdTime), a
BB1_66:
	ld	a, (_exhaustAnimate)
	ld	e, a
	cp	a, 7
	jq	nc, BB1_68
	inc	e
	jq	BB1_69
BB1_68:
	ld	a, e
	cp	a, 7
	ld	e, 0
	jq	z, BB1_70
BB1_69:
	ld	a, e
	ld	(_exhaustAnimate), a
BB1_70:
	ld	a, (_holdTime)
	ld	e, a
	ld	a, l
	sub	a, e
	ld	l, a
	ld	(_avatarY), a
	add	a, -20
	cp	a, -89
	jq	c, BB1_74
	ld	a, e
	cp	a, 1
	call	__setflag
	ld	l, 20
	jq	p, BB1_73
	ld	l, -71
BB1_73:
	ld	a, l
	ld	(_avatarY), a
	xor	a, a
	ld	(_holdTime), a
BB1_74:
	ld	a, l
	cp	a, -71
	ld	a, 9
	jq	c, BB1_82
	ld	a, (_displacement)
	ld	l, a
	cp	a, 9
	jq	nz, BB1_77
	ld	a, 3
	ld	(_displacement), a
	ld	l, a
	jq	BB1_80
BB1_77:
	ld	a, l
	dec	a
	cp	a, 7
	jq	c, BB1_80
	ld	a, (_avatarAnimate)
	neg
	ld	(_avatarAnimate), a
	jq	BB1_81
BB1_80:
	ld	a, (_avatarAnimate)
BB1_81:
	add	a, l
BB1_82:
	ld	(_displacement), a
	ld	a, (_missile_icon_animate)
	ld	l, a
	ld	c, l
	dec	c
	ld	a, (_MAvalue)
	ld	e, a
	ld	a, c
	cp	a, 4
	jq	c, BB1_85
	ld	a, e
	neg
	ld	e, a
	ld	(_MAvalue), a
BB1_85:
	ld	a, e
	add	a, l
	ld	(_missile_icon_animate), a
	ld	a, (_missileAnimate)
	ld	l, a
	inc	l
	cp	a, 12
	call	__setflag
	jq	m, BB1_87
	ld	l, 0
BB1_87:
	ld	a, l
	ld	(_missileAnimate), a
	ld	a, (_deadLasers)
	ld	c, a
	ld	a, (_laserFormation)
	lea	de, iy + 0
	ld	e, a
	ld	hl, _laserMax
	add	hl, de
	ld	l, (hl)
	ld	a, c
	cp	a, l
	jq	nc, BB1_90
	ld	a, (_scrollSpeed)
	lea	hl, iy + 0
	ld	l, a
	ld	bc, 40
	call	__imulu
	ld	(_spawnDelay), hl
	ld	a, (_laserX)
	cp	a, 20
	call	__setflag
	jq	p, BB1_93
	inc	a
	jq	BB1_92
BB1_90:
	ld	a, (_laserX)
	cp	a, 1
	call	__setflag
	jq	m, BB1_93
	dec	a
BB1_92:
	ld	(_laserX), a
BB1_93:
	ld	a, (_laserAnimate)
	ld	l, a
	inc	l
	cp	a, 8
	call	__setflag
	jq	m, BB1_95
	ld	l, 0
BB1_95:
	ld	a, l
	ld	(_laserAnimate), a
	ld	hl, (_backgroundScroll)
	ld	de, -192
	add	hl, de
	ld	de, 0
	push	de
	push	hl
	ld	hl, _background_data
	push	hl
	call	_gfx_Sprite
	pop	hl
	pop	hl
	pop	hl
	ld	hl, (_backgroundScroll)
	ld	de, 0
	push	de
	push	hl
	ld	hl, _background_data
	push	hl
	call	_gfx_Sprite
	pop	hl
	pop	hl
	pop	hl
	ld	hl, (_backgroundScroll)
	ld	de, 192
	add	hl, de
	ld	de, 0
	push	de
	push	hl
	ld	hl, _background_data
	push	hl
	call	_gfx_Sprite
	pop	hl
	pop	hl
	pop	hl
	ld	a, (_displacement)
	ld	d, a
	ld	b, d
	ld	c, 3
	call	__bdivs
	ld	e, a
	rlc	a
	sbc	hl, hl
	ld	l, e
	ld	bc, 3
	call	__imulu
	push	hl
	pop	bc
	ld	hl, _avatar_tiles_data
	add	hl, bc
	ld	hl, (hl)
	ld	(ix + -3), hl
	ld	hl, _avatarX
	push	de
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	ld	iyl, e
	ld	iyh, d
	pop	de
	ld	a, (_avatarY)
	ld	l, a
	ld	a, 1
	sub	a, e
	dec	e
	ld	c, a
	ld	a, d
	cp	a, 3
	call	__setflag
	jq	m, BB1_97
	ld	c, e
BB1_97:
	ld	de, 0
	ld	e, iyl
	ld	d, iyh
	ld	a, l
	sub	a, c
	ld	l, a
	push	hl
	push	de
	ld	hl, (ix + -3)
	push	hl
	call	_gfx_TransparentSprite_NoClip
	pop	hl
	pop	hl
	pop	hl
	ld	a, (_exhaustAnimate)
	cp	a, 18
	jq	nc, BB1_99
	srl	a
	or	a, a
	sbc	hl, hl
	ld	l, a
	ld	de, 3
	push	de
	pop	bc
	call	__imulu
	push	hl
	pop	de
	ld	hl, _exhaust_tiles_data
	add	hl, de
	ld	hl, (hl)
	ld	(ix + -3), hl
	ld	hl, _avatarX
	push	de
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	ld	l, e
	ld	h, d
	pop	de
	ld	de, 0
	ld	e, l
	ld	d, h
	ld	(ix + -6), de
	call	_random
	ld	bc, 3
	call	__iremu
	push	hl
	pop	de
	ld	hl, (ix + -6)
	inc	hl
	add	hl, de
	ex	de, hl
	ld	a, (_avatarY)
	add	a, 31
	ld	l, a
	push	hl
	push	de
	ld	hl, (ix + -3)
	push	hl
	call	_gfx_TransparentSprite_NoClip
	pop	hl
	pop	hl
	pop	hl
	ld	hl, _avatarX
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	or	a, a
	sbc	hl, hl
	ld	l, e
	ld	h, d
	ld	de, 4
	add	hl, de
	ld	a, (_avatarY)
	add	a, 31
	ld	e, a
	push	de
	push	hl
	ld	hl, _nozzle_data
	push	hl
	call	_gfx_TransparentSprite_NoClip
	pop	hl
	pop	hl
	pop	hl
BB1_99:
	ld	hl, _coinX
	ld	(ix + -3), hl
	ld	iy, 0
BB1_100:
	ld	a, (_coinFormation)
	ld	bc, 0
	push	bc
	pop	de
	ld	e, a
	ld	hl, _coin_max
	add	hl, de
	ld	a, (hl)
	push	bc
	pop	de
	ld	e, a
	lea	hl, iy + 0
	or	a, a
	sbc	hl, de
	lea	bc, iy + 0
	jq	nc, BB1_113
	ld	hl, (ix + -3)
	ld	hl, (hl)
	push	hl
	pop	iy
	ld	de, 831
	or	a, a
	sbc	hl, de
	jq	nc, BB1_112
	ld	(ix + -6), bc
	lea	hl, iy + 0
	ld	(ix + -12), hl
	ld	de, -11
	add	hl, de
	ld	iy, _avatarX
	ld	e, (iy)
	ld	d, (iy + 1)
	ld	iy, 0
	ld	iyl, e
	ld	iyh, d
	lea	bc, iy + 0
	ld	de, 24
	add	iy, de
	lea	de, iy + 0
	or	a, a
	sbc	hl, de
	ld	iy, (ix + -12)
	jq	nc, BB1_107
	ld	de, 6
	push	bc
	pop	hl
	add	hl, de
	lea	de, iy + 0
	dec	de
	or	a, a
	sbc	hl, de
	jq	nc, BB1_107
	ld	hl, _coinY
	ld	de, (ix + -6)
	add	hl, de
	ld	a, (hl)
	or	a, a
	sbc	hl, hl
	push	hl
	pop	de
	ld	e, a
	ld	a, (_avatarY)
	ld	l, a
	push	hl
	pop	iy
	ld	bc, 39
	add	iy, bc
	ld	(ix + -9), iy
	push	de
	pop	iy
	ld	bc, 11
	add	iy, bc
	lea	bc, iy + 0
	ld	iy, (ix + -12)
	or	a, a
	sbc	hl, bc
	jq	nc, BB1_107
	ld	bc, (ix + -9)
	push	de
	pop	hl
	or	a, a
	sbc	hl, bc
	jq	nc, BB1_107
	ld	bc, -13
	add	iy, bc
	dec	de
	push	de
	push	iy
	ld	hl, _sparkle_data
	push	hl
	call	_gfx_TransparentSprite
	pop	hl
	pop	hl
	pop	hl
	ld	iy, 1020
	ld	hl, (ix + -3)
	ld	(hl), iy
	ld	bc, (_monies)
	ld	iy, (ix + -23)
	ld	e, (iy)
	push	hl
	pop	iy
	push	bc
	pop	hl
	ld	bc, 1
	xor	a, a
	call	__ladd
	ld	a, e
	ld	(_monies), hl
	ld	(_monies+3), a
	ld	de, 1020
	jq	BB1_111
BB1_107:
	ld	hl, _coinAnimate
	ld	de, (ix + -6)
	add	hl, de
	ld	(ix + -9), hl
	ld	b, (hl)
	ld	l, (ix + -17)
	ld	h, (ix + -16)
	ld	c, l
	call	__bdivu
	or	a, a
	sbc	hl, hl
	ld	l, a
	ld	bc, 3
	call	__imulu
	push	hl
	pop	de
	ld	hl, _coin_tiles_data
	add	hl, de
	ld	de, (hl)
	ld	bc, -12
	add	iy, bc
	ld	hl, _coinY
	ld	bc, (ix + -6)
	add	hl, bc
	ld	a, (hl)
	or	a, a
	sbc	hl, hl
	ld	l, a
	push	hl
	push	iy
	push	de
	call	_gfx_TransparentSprite
	pop	hl
	pop	hl
	pop	hl
	ld	hl, (ix + -9)
	ld	a, (hl)
	ld	iy, (ix + -3)
	ld	de, (iy)
	cp	a, 38
	jq	nc, BB1_110
	push	de
	pop	hl
	ld	bc, 330
	or	a, a
	sbc	hl, bc
	ld	hl, (ix + -9)
	jq	nc, BB1_110
	add	a, 2
	ld	(hl), a
	jq	BB1_111
BB1_110:
	ld	(hl), 0
BB1_111:
	ld	(ix + -3), iy
	ld	a, (_scrollSpeed)
	ld	bc, 0
	ld	c, a
	ex	de, hl
	or	a, a
	sbc	hl, bc
	ld	(iy), hl
	ld	bc, (ix + -6)
BB1_112:
	inc	bc
	ld	iy, (ix + -3)
	lea	iy, iy + 3
	ld	(ix + -3), iy
	push	bc
	pop	iy
	jq	BB1_100
BB1_113:
	ld	bc, 0
BB1_114:
	push	bc
	pop	hl
	ld	de, 3
	or	a, a
	sbc	hl, de
	jq	z, BB1_135
	push	bc
	pop	hl
	add	hl, hl
	ex	de, hl
	ld	hl, _zapperX
	add	hl, de
	ld	(ix + -3), hl
	push	de
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	ld	l, e
	ld	h, d
	pop	de
	ld.sis	de, 331
	or	a, a
	sbc.sis	hl, de
	jq	nc, BB1_134
	push	bc
	pop	hl
	push	bc
	pop	de
	ld	bc, 3
	call	__imulu
	push	hl
	pop	bc
	ld	hl, _zapperY
	add	hl, bc
	ld	(ix + -9), hl
	ld	hl, 16
	ld	(ix + -12), hl
	or	a, a
	sbc	hl, hl
	ld	(ix + -6), hl
	ld	(ix + -15), de
BB1_117:
	ld	hl, _zapperLength
	push	hl
	pop	iy
	add	iy, de
	ld	a, (iy)
	ld	bc, 0
	ld	c, a
	ld	hl, (ix + -3)
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	ld	hl, (ix + -6)
	or	a, a
	sbc	hl, bc
	jq	nc, BB1_119
	ld	iy, 0
	ld	iyl, e
	ld	iyh, d
	ld	de, -14
	add	iy, de
	ld	hl, (ix + -9)
	ld	de, (hl)
	ld	hl, (ix + -12)
	add	hl, de
	push	hl
	push	iy
	ld	hl, _beam_data
	push	hl
	call	_gfx_TransparentSprite
	pop	hl
	pop	hl
	pop	hl
	ld	hl, (ix + -6)
	inc	hl
	ld	(ix + -6), hl
	ld	de, 10
	ld	hl, (ix + -12)
	add	hl, de
	ld	(ix + -12), hl
	ld	de, (ix + -15)
	jq	BB1_117
BB1_119:
	ld	l, e
	ld	h, d
	ld.sis	bc, 336
	or	a, a
	sbc.sis	hl, bc
	jq	nc, BB1_133
	ld	(ix + -6), iy
	call	_random
	ld	a, l
	and	a, 1
	ld	(_randVar), a
	call	_random
	ld	a, l
	and	a, 1
	ld	e, a
	ld	(_randVar1), a
	ld	a, (_randVar)
	or	a, a
	sbc	hl, hl
	ld	l, a
	ld	bc, 2
	add	hl, bc
	ld	a, e
	ld	b, 2
	call	__bshl
	ld	de, 0
	ld	e, a
	add	hl, de
	ld	de, 3
	push	de
	pop	bc
	call	__imulu
	push	hl
	pop	de
	ld	hl, _electric_animation
	add	hl, de
	ld	de, (hl)
	ld	hl, (ix + -3)
	ld	c, (hl)
	inc	hl
	ld	b, (hl)
	ld	iy, 0
	ld	iyl, c
	ld	iyh, b
	ld	bc, -25
	add	iy, bc
	ld	hl, (ix + -9)
	ld	hl, (hl)
	ld	bc, -7
	add	hl, bc
	push	hl
	push	iy
	push	de
	call	_gfx_TransparentSprite
	pop	hl
	pop	hl
	pop	hl
	ld	a, (_randVar)
	or	a, a
	sbc	hl, hl
	ld	l, a
	ld	bc, 3
	call	__imulu
	push	hl
	pop	de
	ld	hl, _electric_animation
	add	hl, de
	ld	hl, (hl)
	ld	(ix + -12), hl
	ld	hl, (ix + -3)
	ld	c, (hl)
	inc	hl
	ld	b, (hl)
	ld	de, 0
	push	de
	pop	hl
	ld	l, c
	ld	h, b
	ld	bc, -25
	add	hl, bc
	ld	(ix + -26), hl
	ld	hl, (ix + -9)
	ld	iy, (hl)
	ld	bc, 7
	add	iy, bc
	ld	hl, (ix + -6)
	ld	a, (hl)
	ld	e, a
	ex	de, hl
	ld	bc, 10
	call	__imulu
	push	hl
	pop	bc
	add	iy, bc
	push	iy
	ld	hl, (ix + -26)
	push	hl
	ld	hl, (ix + -12)
	push	hl
	call	_gfx_TransparentSprite
	pop	hl
	pop	hl
	pop	hl
	ld	hl, _zapperAnimate
	ld	de, (ix + -15)
	add	hl, de
	ld	(ix + -12), hl
	ld	b, (hl)
	ld	l, (ix + -17)
	ld	h, (ix + -16)
	ld	c, l
	call	__bdivu
	or	a, a
	sbc	hl, hl
	ld	l, a
	ld	bc, 3
	call	__imulu
	push	hl
	pop	de
	ld	hl, _zapper_tiles_flipped
	add	hl, de
	ld	de, (hl)
	ld	hl, (ix + -3)
	ld	c, (hl)
	inc	hl
	ld	b, (hl)
	ld	iy, 0
	ld	iyl, c
	ld	iyh, b
	ld	bc, -18
	add	iy, bc
	ld	hl, (ix + -9)
	ld	bc, (hl)
	push	bc
	push	iy
	push	de
	call	_gfx_TransparentSprite
	pop	hl
	pop	hl
	pop	hl
	ld	hl, (ix + -12)
	ld	b, (hl)
	ld	l, (ix + -17)
	ld	h, (ix + -16)
	ld	c, l
	call	__bdivu
	or	a, a
	sbc	hl, hl
	ld	l, a
	ld	bc, 3
	call	__imulu
	push	hl
	pop	de
	ld	hl, _zapper_tiles_data
	add	hl, de
	ld	hl, (hl)
	ld	(ix + -26), hl
	ld	hl, (ix + -3)
	ld	c, (hl)
	inc	hl
	ld	b, (hl)
	ld	de, 0
	ex	de, hl
	ld	l, c
	ld	h, b
	ld	bc, -18
	add	hl, bc
	ex	de, hl
	ld	hl, (ix + -9)
	ld	iy, (hl)
	ld	bc, 14
	add	iy, bc
	ld	hl, (ix + -6)
	ld	a, (hl)
	or	a, a
	sbc	hl, hl
	ld	l, a
	ld	bc, 10
	call	__imulu
	push	hl
	pop	bc
	add	iy, bc
	push	iy
	push	de
	ld	hl, (ix + -26)
	push	hl
	call	_gfx_TransparentSprite
	ld	iy, (ix + -12)
	pop	hl
	pop	hl
	pop	hl
	ld	e, (iy)
	ld	a, e
	add	a, 2
	ld	l, a
	ld	a, e
	cp	a, 28
	jq	c, BB1_122
	ld	l, 0
BB1_122:
	ld	(iy), l
	ld	a, (_health)
	ld	hl, (ix + -3)
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	cp	a, 1
	call	__setflag
	jq	m, BB1_133
	ld	(ix + -27), a
	or	a, a
	sbc	hl, hl
	ld	l, e
	ld	h, d
	ld	(ix + -12), hl
	ld	bc, -14
	add	hl, bc
	ld	iy, _avatarX
	ld	c, (iy)
	ld	b, (iy + 1)
	ld	iy, 0
	ld	iyl, c
	ld	iyh, b
	ld	(ix + -26), iy
	ld	bc, 24
	add	iy, bc
	lea	bc, iy + 0
	or	a, a
	sbc	hl, bc
	call	__setflag
	jq	p, BB1_133
	ld	bc, 6
	ld	hl, (ix + -26)
	add	hl, bc
	ld	bc, -4
	ld	iy, (ix + -12)
	add	iy, bc
	lea	bc, iy + 0
	or	a, a
	sbc	hl, bc
	call	__setflag
	jq	p, BB1_133
	ld	a, (_avatarY)
	or	a, a
	sbc	hl, hl
	ld	l, a
	ld	(ix + -12), hl
	ld	hl, (ix + -9)
	ld	iy, (hl)
	lea	hl, iy + 0
	ld	bc, 2
	add	hl, bc
	ld	(ix + -9), hl
	ld	hl, (ix + -6)
	ld	a, (hl)
	or	a, a
	sbc	hl, hl
	ld	l, a
	ld	bc, 10
	call	__imulu
	ld	bc, 32
	add	iy, bc
	push	hl
	pop	bc
	add	iy, bc
	ld	hl, (ix + -12)
	ld	bc, 50
	add	hl, bc
	push	hl
	pop	bc
	ld	hl, (ix + -9)
	or	a, a
	sbc	hl, bc
	jq	nc, BB1_133
	lea	bc, iy + 0
	ld	hl, (ix + -12)
	or	a, a
	sbc	hl, bc
	jq	nc, BB1_133
	ld	a, (ix + -27)
	dec	a
	ld	(_health), a
BB1_133:
	ld	a, (_scrollSpeed)
	ld	c, a
	ld	b, 0
	ld	l, e
	ld	h, d
	or	a, a
	sbc.sis	hl, bc
	ld	iy, (ix + -3)
	ld	(iy), l
	ld	(iy + 1), h
	ld	bc, (ix + -15)
BB1_134:
	inc	bc
	jq	BB1_114
BB1_135:
	ld	a, 1
	ld	bc, 0
BB1_136:
	bit	0, a
	jq	z, BB1_154
	ld	(ix + -3), bc
	push	bc
	pop	hl
	add	hl, hl
	ex	de, hl
	ld	hl, _missileX
	push	hl
	pop	iy
	add	iy, de
	ld	e, (iy)
	ld	d, (iy + 1)
	ld	l, e
	ld	h, d
	ld.sis	bc, 1467
	or	a, a
	sbc.sis	hl, bc
	ld	a, 0
	ld	bc, 1
	jq	nc, BB1_136
	ld	l, e
	ld	h, d
	ld.sis	bc, 366
	or	a, a
	sbc.sis	hl, bc
	ld	(ix + -6), iy
	jq	nc, BB1_145
	ld	iy, 0
	ld	iyl, e
	ld	iyh, d
	ld	a, (_missileAnimate)
	ld	b, a
	ld	c, 2
	call	__bdivs
	ld	l, a
	rlc	l
	sbc	hl, hl
	ld	l, a
	ld	bc, 3
	call	__imulu
	push	hl
	pop	de
	ld	hl, _missile_tiles_data
	add	hl, de
	ld	de, (hl)
	ld	bc, -46
	add	iy, bc
	ld	hl, _missileY
	ld	bc, (ix + -3)
	add	hl, bc
	ld	(ix + -3), hl
	ld	a, (hl)
	or	a, a
	sbc	hl, hl
	ld	l, a
	ld	bc, -18
	add	hl, bc
	push	hl
	push	iy
	push	de
	call	_gfx_TransparentSprite
	pop	hl
	pop	hl
	pop	hl
	ld	a, (_health)
	cp	a, 1
	call	__setflag
	jq	m, BB1_153
	ld	hl, _avatarX
	push	de
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	ld	l, e
	ld	h, d
	pop	de
	ld	bc, 0
	push	bc
	pop	de
	ld	c, l
	ld	b, h
	ld	(ix + -9), bc
	push	bc
	pop	hl
	ld	bc, 6
	add	hl, bc
	ld	iy, (ix + -6)
	ld	c, (iy)
	ld	b, (iy + 1)
	push	de
	pop	iy
	ld	iyl, c
	ld	iyh, b
	lea	de, iy + 0
	ld	bc, -26
	add	iy, bc
	lea	bc, iy + 0
	or	a, a
	sbc	hl, bc
	call	__setflag
	jq	p, BB1_153
	ld	bc, -45
	ex	de, hl
	add	hl, bc
	ld	bc, 24
	ld	iy, (ix + -9)
	add	iy, bc
	lea	bc, iy + 0
	or	a, a
	sbc	hl, bc
	call	__setflag
	jq	p, BB1_153
	ld	hl, (ix + -3)
	ld	e, a
	ld	a, (hl)
	ld	iy, 0
	ld	iyl, a
	ld	(ix + -3), iy
	lea	hl, iy + 0
	ld	bc, -5
	add	hl, bc
	ld	(ix + -9), hl
	ld	a, (_avatarY)
	or	a, a
	sbc	hl, hl
	ld	l, a
	ld	a, e
	push	hl
	pop	iy
	ld	bc, 40
	add	iy, bc
	lea	de, iy + 0
	ld	bc, 7
	ld	iy, (ix + -3)
	add	iy, bc
	lea	bc, iy + 0
	or	a, a
	sbc	hl, bc
	jq	nc, BB1_153
	push	de
	pop	bc
	ld	hl, (ix + -9)
	or	a, a
	sbc	hl, bc
	call	__setflag
	jq	p, BB1_153
	dec	a
	ld	(_health), a
	jq	BB1_153
BB1_145:
	ld	l, e
	ld	h, d
	ld.sis	bc, 641
	or	a, a
	sbc.sis	hl, bc
	jq	nc, BB1_147
	ld	a, (_missile_icon_animate)
	ld	b, a
	ld	c, 3
	call	__bdivs
	ld	l, a
	rlc	l
	sbc	hl, hl
	ld	l, a
	ld	de, 3
	push	de
	pop	bc
	call	__imulu
	push	hl
	pop	de
	ld	hl, _missileIncoming_tiles_data
	add	hl, de
	ld	hl, (hl)
	ld	(ix + -9), hl
	call	_random
	ld	bc, 3
	call	__iremu
	ld	bc, 280
	call	__ior
	ld	(ix + -12), hl
	ld	hl, _missileY
	ld	de, (ix + -3)
	add	hl, de
	ld	a, (hl)
	or	a, a
	sbc	hl, hl
	ld	l, a
	ld	(ix + -3), hl
	call	_random
	ld	bc, 3
	call	__iremu
	push	hl
	pop	de
	ld	bc, -17
	ld	hl, (ix + -3)
	add	hl, bc
	add	hl, de
	push	hl
	ld	hl, (ix + -12)
	push	hl
	ld	hl, (ix + -9)
	push	hl
	call	_gfx_TransparentSprite
	pop	hl
	pop	hl
	pop	hl
	jq	BB1_153
BB1_147:
	ld	l, e
	ld	h, d
	ld.sis	de, 1466
	or	a, a
	sbc.sis	hl, de
	jq	nc, BB1_153
	ld	a, (_missile_icon_animate)
	ld	b, a
	ld	c, 2
	call	__bdivs
	ld	l, a
	rlc	l
	sbc	hl, hl
	ld	l, a
	ld	bc, 3
	call	__imulu
	push	hl
	pop	de
	ld	hl, _missileWarning_tiles_data
	add	hl, de
	ld	iy, (hl)
	ld	hl, _missileY
	ld	de, (ix + -3)
	add	hl, de
	ld	(ix + -3), hl
	ld	a, (hl)
	ld	de, 0
	ex	de, hl
	ld	l, a
	ld	bc, -11
	add	hl, bc
	push	hl
	ld	hl, 293
	push	hl
	push	iy
	call	_gfx_TransparentSprite
	pop	hl
	pop	hl
	pop	hl
	ld	hl, (ix + -3)
	ld	a, (hl)
	ld	iy, 0
	lea	bc, iy + 0
	ld	(ix + -9), a
	ld	c, a
	ld	a, (_avatarY)
	ld	iyl, a
	lea	hl, iy + 0
	ld	de, 20
	add	hl, de
	ex	de, hl
	push	bc
	pop	hl
	or	a, a
	sbc	hl, de
	jq	nc, BB1_150
	ld	a, (ix + -9)
	add	a, 2
	jq	BB1_152
BB1_150:
	ld	a, (ix + -9)
	ld	de, 21
	add	iy, de
	lea	hl, iy + 0
	or	a, a
	sbc	hl, bc
	jq	nc, BB1_153
	add	a, -2
BB1_152:
	ld	hl, (ix + -3)
	ld	(hl), a
BB1_153:
	ld	a, (_scrollSpeed)
	ld	e, a
	ld	d, 0
	ld	iy, (ix + -6)
	ld	c, (iy)
	ld	b, (iy + 1)
	ld.sis	hl, -8
	or	a, a
	sbc.sis	hl, de
	add.sis	hl, bc
	ld	(iy), l
	ld	(iy + 1), h
	xor	a, a
	ld	bc, 1
	jq	BB1_136
BB1_154:
	ld	hl, _laserLifetime
	ld	(ix + -3), hl
	ld	iy, 0
BB1_155:
	ld	a, (_laserFormation)
	ld	bc, 0
	push	bc
	pop	de
	ld	e, a
	ld	hl, _laserMax
	add	hl, de
	ld	a, (hl)
	push	bc
	pop	de
	ld	e, a
	lea	hl, iy + 0
	or	a, a
	sbc	hl, de
	jq	nc, BB1_183
	ld	c, a
	ld	(ix + -6), iy
	ld	a, (_laserX)
	ld	l, a
	cp	a, 1
	call	__setflag
	jq	m, BB1_173
	ld	a, (_deadLasers)
	ld	e, a
	ld	a, l
	cp	a, 20
	call	__setflag
	jq	p, BB1_160
	ld	a, e
	ld	h, c
	cp	a, h
	jq	nc, BB1_160
	xor	a, a
	ld	(_laserAnimate), a
	ld	de, (_powering_tiles_data)
	ld	iy, 0
	ex	de, hl
	ld	iyl, e
	ex	de, hl
	ld	bc, -19
	add	iy, bc
	ld	hl, _laserY
	ld	bc, (ix + -6)
	add	hl, bc
	ld	(ix + -9), hl
	ld	a, (hl)
	or	a, a
	sbc	hl, hl
	ld	l, a
	push	hl
	push	iy
	push	de
	call	_gfx_TransparentSprite
	pop	hl
	pop	hl
	pop	hl
	ld	de, (_powering_tiles_data)
	ld	a, (_laserX)
	ld	l, a
	rlc	l
	sbc	hl, hl
	push	hl
	pop	bc
	ld	c, a
	ld	hl, 320
	or	a, a
	sbc	hl, bc
	ld	iy, (ix + -9)
	ld	a, (iy)
	ld	bc, 0
	ld	c, a
	push	bc
	push	hl
	push	de
	call	_gfx_TransparentSprite
	pop	hl
	pop	hl
	pop	hl
	jq	BB1_164
BB1_160:
	ld	a, e
	cp	a, c
	jq	nc, BB1_163
	ld	hl, (ix + -3)
	ld	bc, (hl)
	push	bc
	pop	hl
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	nz, BB1_165
	inc	e
	ld	a, e
	ld	(_deadLasers), a
	jq	BB1_167
BB1_163:
	xor	a, a
	ld	(_laserAnimate), a
BB1_164:
	ld	iy, (ix + -3)
	jq	BB1_169
BB1_165:
	push	bc
	pop	hl
	ld	de, 9
	or	a, a
	sbc	hl, de
	jq	nc, BB1_174
	ld	a, (_laserAnimate)
	ld	b, a
	ld	a, 3
	ld	c, a
	call	__bdivs
	ld	l, a
	rlc	l
	sbc	hl, hl
	ld	l, a
	ld	de, 3
	push	de
	pop	bc
	call	__imulu
	push	hl
	pop	de
	ld	hl, _shutdown_tiles_data
	add	hl, de
	ld	de, (hl)
	ld	hl, _laserY
	ld	bc, (ix + -6)
	add	hl, bc
	ld	(ix + -9), hl
	ld	a, (hl)
	or	a, a
	sbc	hl, hl
	ld	l, a
	ld	bc, -16
	add	hl, bc
	push	hl
	ld	hl, 5
	push	hl
	push	de
	call	_gfx_TransparentSprite
	pop	hl
	pop	hl
	pop	hl
	ld	a, (_laserAnimate)
	ld	b, a
	ld	c, 3
	call	__bdivs
	ld	l, a
	rlc	l
	sbc	hl, hl
	ld	l, a
	ld	bc, 3
	call	__imulu
	push	hl
	pop	de
	ld	hl, _shutdown_tiles_flipped
	add	hl, de
	ld	de, (hl)
	ld	hl, (ix + -9)
	ld	a, (hl)
	or	a, a
	sbc	hl, hl
	ld	l, a
	ld	bc, -16
	add	hl, bc
	push	hl
	ld	hl, 285
	push	hl
	push	de
	call	_gfx_TransparentSprite
	pop	hl
	pop	hl
	pop	hl
	ld	a, (_laserAnimate)
	ld	b, a
	ld	c, 3
	call	__bdivs
	inc	a
	ld	l, a
	rlc	l
	sbc	hl, hl
	ld	l, a
	ld	bc, 3
	call	__imulu
	push	hl
	pop	de
	ld	hl, _laser_tiles_data
	add	hl, de
	ld	bc, (hl)
	ld	hl, (ix + -9)
	ld	a, (hl)
	ld	de, 0
	ld	e, a
	push	de
	ld	de, 35
	push	de
	push	bc
	call	_gfx_RLETSprite
	pop	hl
	pop	hl
	pop	hl
BB1_167:
	ld	iy, (ix + -3)
BB1_168:
	ld	hl, (iy)
	dec	hl
	ld	(iy), hl
BB1_169:
	ld	hl, (iy)
	ld	de, 109
	or	a, a
	sbc	hl, de
	jq	nc, BB1_171
	ld	a, (_laserAnimate)
	ld	b, a
	ld	a, 3
	ld	c, a
	call	__bdivs
	inc	a
	ld	l, a
	rlc	l
	sbc	hl, hl
	ld	l, a
	ld	de, 3
	push	de
	pop	bc
	call	__imulu
	push	hl
	pop	de
	ld	hl, _powering_tiles_data
	add	hl, de
	ld	de, (hl)
	ld	a, (_laserX)
	ld	l, a
	rlc	l
	sbc	hl, hl
	ld	l, a
	ld	bc, -19
	add	hl, bc
	ld	bc, _laserY
	push	bc
	pop	iy
	ld	bc, (ix + -6)
	add	iy, bc
	ld	(ix + -9), iy
	ld	a, (iy)
	ld	bc, 0
	ld	c, a
	push	bc
	push	hl
	push	de
	call	_gfx_TransparentSprite
	ld	iy, (ix + -9)
	pop	hl
	pop	hl
	pop	hl
	ld	a, (_laserAnimate)
	ld	b, a
	ld	c, 3
	call	__bdivs
	inc	a
	ld	l, a
	rlc	l
	sbc	hl, hl
	ld	l, a
	ld	bc, 3
	call	__imulu
	push	hl
	pop	de
	ld	hl, _powering_tiles_flipped
	add	hl, de
	jq	BB1_172
BB1_171:
	ld	de, (_powering_tiles_data)
	ld	a, (_laserX)
	ld	l, a
	rlc	l
	sbc	hl, hl
	ld	l, a
	ld	bc, -19
	add	hl, bc
	ld	bc, _laserY
	push	bc
	pop	iy
	ld	bc, (ix + -6)
	add	iy, bc
	ld	(ix + -9), iy
	ld	a, (iy)
	ld	bc, 0
	ld	c, a
	push	bc
	push	hl
	push	de
	call	_gfx_TransparentSprite
	ld	iy, (ix + -9)
	pop	hl
	pop	hl
	pop	hl
	ld	hl, _powering_tiles_flipped
BB1_172:
	ld	de, (hl)
	ld	a, (_laserX)
	ld	l, a
	rlc	l
	sbc	hl, hl
	push	hl
	pop	bc
	ld	c, a
	ld	hl, 320
	or	a, a
	sbc	hl, bc
	ld	a, (iy)
	ld	bc, 0
	ld	c, a
	push	bc
	push	hl
	push	de
	call	_gfx_TransparentSprite
	pop	hl
	pop	hl
	pop	hl
BB1_173:
	ld	hl, (ix + -6)
	inc	hl
	ld	iy, (ix + -3)
	lea	iy, iy + 3
	ld	(ix + -3), iy
	push	hl
	pop	iy
	jq	BB1_155
BB1_174:
	push	bc
	pop	hl
	ld	de, 59
	or	a, a
	sbc	hl, de
	jq	nc, BB1_181
	ld	a, (_laserAnimate)
	ld	b, a
	ld	a, 3
	ld	c, a
	call	__bdivs
	ld	l, a
	rlc	l
	sbc	hl, hl
	ld	l, a
	ld	de, 3
	push	de
	pop	bc
	call	__imulu
	push	hl
	pop	de
	ld	hl, _firing_tiles_data
	add	hl, de
	ld	iy, (hl)
	ld	hl, _laserY
	ld	bc, (ix + -6)
	add	hl, bc
	ld	(ix + -9), hl
	ld	a, (hl)
	ld	de, 0
	ex	de, hl
	ld	l, a
	ld	bc, -11
	add	hl, bc
	push	hl
	ld	hl, 5
	push	hl
	push	iy
	call	_gfx_TransparentSprite
	pop	hl
	pop	hl
	pop	hl
	ld	a, (_laserAnimate)
	ld	b, a
	ld	c, 3
	call	__bdivs
	ld	l, a
	rlc	l
	sbc	hl, hl
	ld	l, a
	ld	bc, 3
	call	__imulu
	push	hl
	pop	de
	ld	hl, _firing_tiles_flipped
	add	hl, de
	ld	de, (hl)
	ld	hl, (ix + -9)
	ld	a, (hl)
	or	a, a
	sbc	hl, hl
	ld	l, a
	ld	bc, -11
	add	hl, bc
	push	hl
	ld	hl, 285
	push	hl
	push	de
	call	_gfx_TransparentSprite
	pop	hl
	pop	hl
	pop	hl
	ld	bc, (_laser_tiles_data)
	ld	hl, (ix + -9)
	ld	a, (hl)
	ld	de, 0
	ld	e, a
	push	de
	ld	de, 35
	push	de
	push	bc
	call	_gfx_RLETSprite
	pop	hl
	pop	hl
	pop	hl
	ld	a, (_health)
	cp	a, 1
	call	__setflag
	jq	m, BB1_179
	ld	hl, (ix + -9)
	ld	c, (hl)
	ld	de, 0
	ld	(ix + -12), a
	push	de
	pop	hl
	ld	l, c
	ld	a, (_avatarY)
	ld	e, a
	ld	(ix + -9), de
	ld	bc, 35
	ld	iy, (ix + -9)
	add	iy, bc
	ld	(ix + -9), iy
	ld	(ix + -15), hl
	ld	bc, 10
	add	hl, bc
	push	hl
	pop	bc
	ex	de, hl
	ld	a, (ix + -12)
	or	a, a
	sbc	hl, bc
	jq	nc, BB1_179
	ld	bc, (ix + -9)
	ld	hl, (ix + -15)
	or	a, a
	sbc	hl, bc
	jq	nc, BB1_179
	dec	a
	ld	(_health), a
BB1_179:
	ld	iy, (ix + -3)
	ld	hl, (iy)
	ld	de, 9
	or	a, a
	sbc	hl, de
	jq	nz, BB1_168
	xor	a, a
	ld	(_laserAnimate), a
	jq	BB1_168
BB1_181:
	push	bc
	pop	hl
	ld	de, 109
	or	a, a
	sbc	hl, de
	ld	iy, (ix + -3)
	jq	nc, BB1_168
	ld	hl, 5
	push	hl
	call	_gfx_SetColor
	pop	hl
	ld	hl, _laserY
	ld	de, (ix + -6)
	add	hl, de
	ld	(ix + -9), hl
	ld	a, (hl)
	or	a, a
	sbc	hl, hl
	ld	l, a
	ld	de, 7
	add	hl, de
	push	hl
	ld	de, 300
	push	de
	push	hl
	ld	hl, 20
	push	hl
	call	_gfx_Line
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	ld	hl, (ix + -9)
	ld	a, (hl)
	ld	iy, 0
	ld	iyl, a
	ld	de, 7
	add	iy, de
	ld	hl, (ix + -3)
	ld	hl, (hl)
	ld	de, -50
	add	hl, de
	ld	a, 2
	ld	c, a
	call	__ishru
	ld	de, 7
	add	hl, de
	push	hl
	push	iy
	ld	hl, 11
	push	hl
	call	_gfx_Circle
	pop	hl
	pop	hl
	pop	hl
	ld	hl, (ix + -9)
	ld	a, (hl)
	ld	iy, 0
	ld	iyl, a
	ld	de, 7
	add	iy, de
	ld	hl, (ix + -3)
	ld	hl, (hl)
	ld	de, -50
	add	hl, de
	ld	c, 2
	call	__ishru
	ld	de, 7
	add	hl, de
	push	hl
	push	iy
	ld	hl, 308
	push	hl
	call	_gfx_Circle
	ld	iy, (ix + -3)
	pop	hl
	pop	hl
	pop	hl
	jq	BB1_168
BB1_183:
	ld	hl, 4
	push	hl
	call	_gfx_SetTextFGColor
	pop	hl
	ld	hl, 1
	push	hl
	push	hl
	call	_gfx_SetTextScale
	pop	hl
	pop	hl
	ld	hl, 30
	push	hl
	ld	hl, 10
	push	hl
	call	_gfx_SetTextXY
	pop	hl
	pop	hl
	ld	hl, (_monies)
	ld	de, 4
	push	de
	push	hl
	call	_gfx_PrintInt
	pop	hl
	pop	hl
	ld	hl, 3
	push	hl
	call	_gfx_SetTextFGColor
	pop	hl
	ld	hl, 10
	push	hl
	ld	hl, 280
	push	hl
	call	_gfx_SetTextXY
	pop	hl
	pop	hl
	ld	a, (_frameTime)
	or	a, a
	sbc	hl, hl
	ld	l, a
	ld	de, 1
	push	de
	push	hl
	call	_gfx_PrintInt
	pop	hl
	pop	hl
	ld	hl, 2
	push	hl
	push	hl
	call	_gfx_SetTextScale
	pop	hl
	pop	hl
	ld	hl, 10
	push	hl
	push	hl
	call	_gfx_SetTextXY
	pop	hl
	pop	hl
	ld	a, (_scrollSpeed)
	ld	bc, 0
	ld	c, a
	xor	a, a
	ld	hl, (_distance)
	ld	iy, (ix + -20)
	ld	e, (iy)
	call	__ladd
	ld	(_distance), hl
	ld	a, e
	ld	(_distance+3), a
	ld	bc, 15
	xor	a, a
	call	__ldivu
	ld	de, 4
	push	de
	push	hl
	call	_gfx_PrintInt
	pop	hl
	pop	hl
	call	_gfx_SwapDraw
	ld	hl, -917504
	push	hl
	pop	iy
	ld	bc, (iy)
	ld	a, (iy + 3)
	ld	hl, 32768
	ld	e, 0
	call	__ldivu
	ld	a, l
	ld	(_frameTime), a
	ld	bc, 255
	call	__iand
	push	hl
	pop	bc
	ld	a, c
	cp	a, 26
	jq	c, BB1_185
	ld.sis	hl, 1000
	call	__sdivu
	ld	e, l
	ld	d, h
	ld.sis	hl, 40
	or	a, a
	sbc.sis	hl, de
	push	hl
	call	_delay
	pop	hl
BB1_185:
	ld	hl, -720878
	push	de
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	ld	l, e
	ld	h, d
	pop	de
	ld	a, l
	cp	a, 0
	call	__setflag
	jq	m, BB1_188
BB1_186:
	or	a, a
	sbc	hl, hl
	ld	de, -917504
	push	de
	pop	iy
	ld	(iy), hl
	xor	a, a
	ld	(iy + 3), a
	ld	hl, -720868
	push	de
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	ld	l, e
	ld	h, d
	pop	de
	ld	a, (_health)
	bit	6, l
	jq	nz, BB1_223
	cp	a, 1
	call	__setflag
	jq	p, BB1_20
	jq	BB1_223
BB1_188:
	ld	hl, 6
	push	hl
	call	_gfx_FillScreen
	pop	hl
	ld	hl, (_pauseButtonOn_tiles_data)
	ld	de, 33
	push	de
	ld	de, 70
	push	de
	push	hl
	call	_gfx_Sprite
	pop	hl
	pop	hl
	pop	hl
	ld	hl, (_pauseButtonOn_tiles_data+3)
	ld	de, 93
	push	de
	ld	de, 70
	push	de
	push	hl
	call	_gfx_Sprite
	pop	hl
	pop	hl
	pop	hl
	ld	hl, (_pauseButtonOn_tiles_data+6)
	ld	de, 153
	push	de
	ld	de, 70
	push	de
	push	hl
	call	_gfx_Sprite
	pop	hl
	pop	hl
	pop	hl
	ld	hl, (_pauseButtonOn_tiles_data+12)
	ld	de, 33
	push	de
	ld	de, 230
	push	de
	push	hl
	call	_gfx_Sprite
	pop	hl
	pop	hl
	pop	hl
	ld	hl, (_pauseButtonOn_tiles_data+12)
	ld	de, 93
	push	de
	ld	de, 230
	push	de
	push	hl
	call	_gfx_Sprite
	pop	hl
	pop	hl
	pop	hl
	ld	hl, (_pauseButtonOn_tiles_data+12)
	ld	de, 153
	push	de
	ld	de, 230
	push	de
	push	hl
	call	_gfx_Sprite
	pop	hl
	pop	hl
	pop	hl
	or	a, a
	sbc	hl, hl
BB1_189:
	ld	bc, 255
	call	__iand
	ld	a, l
	cp	a, -116
	jq	nc, BB1_191
	ld	bc, (_pauseButtonOn_tiles_data+9)
	push	hl
	pop	iy
	ld	de, 90
	add	iy, de
	ld	(ix + -3), iy
	ld	de, 33
	push	de
	push	iy
	push	bc
	ld	(ix + -6), hl
	call	_gfx_Sprite
	pop	hl
	pop	hl
	pop	hl
	ld	hl, (_pauseButtonOn_tiles_data+9)
	ld	de, 93
	push	de
	ld	de, (ix + -3)
	push	de
	push	hl
	call	_gfx_Sprite
	pop	hl
	pop	hl
	pop	hl
	ld	hl, (_pauseButtonOn_tiles_data+9)
	ld	de, 153
	push	de
	ld	de, (ix + -3)
	push	de
	push	hl
	call	_gfx_Sprite
	ld	hl, (ix + -6)
	pop	de
	pop	de
	pop	de
	ld	de, 20
	add	hl, de
	jq	BB1_189
BB1_191:
	ld	hl, 2
	push	hl
	call	_gfx_SetTextFGColor
	pop	hl
	ld	hl, 3
	push	hl
	push	hl
	call	_gfx_SetTextScale
	pop	hl
	pop	hl
	ld	hl, 47
	push	hl
	ld	hl, 120
	push	hl
	ld	hl, _pauseOptions
	push	hl
	call	_gfx_PrintStringXY
	pop	hl
	pop	hl
	pop	hl
	ld	hl, 107
	push	hl
	ld	hl, 103
	push	hl
	ld	hl, _pauseOptions+7
	push	hl
	call	_gfx_PrintStringXY
	pop	hl
	pop	hl
	pop	hl
	ld	hl, 167
	push	hl
	ld	hl, 90
	push	hl
	ld	hl, _pauseOptions+14
	push	hl
	call	_gfx_PrintStringXY
	pop	hl
	pop	hl
	pop	hl
	ld	hl, 2
	push	hl
	call	_gfx_SetColor
	pop	hl
	ld	hl, 52
	push	hl
	ld	hl, 182
	push	hl
	ld	hl, 32
	push	hl
	ld	hl, 69
	push	hl
	call	_gfx_Rectangle
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	xor	a, a
	ld	(_debounced), a
	ld	(_menuSelect), a
BB1_192:
	ld	hl, -720868
	push	de
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	ld	l, e
	ld	h, d
	pop	de
	ld	a, l
	bit	6, a
	jq	nz, BB1_219
	call	_kb_Scan
	ld	iy, -720866
	ld	l, (iy)
	ld	h, (iy + 1)
	ld.sis	bc, 1
	call	__sand
	ld	a, l
	ld	l, 1
	xor	a, l
	xor	a, l
	bit	0, a
	jq	nz, BB1_197
	ld	l, (iy)
	ld	h, (iy + 1)
	ld	a, l
	bit	3, a
	jq	nz, BB1_197
	ld	hl, -720878
	push	de
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	ld	l, e
	ld	h, d
	pop	de
	ld	a, l
	bit	5, a
	jq	nz, BB1_215
	ld	a, (_debounced)
	ld	l, 1
	xor	a, l
	xor	a, l
	bit	0, a
	jq	z, BB1_210
	jq	BB1_219
BB1_197:
	xor	a, a
	ld	(_debounced), a
	ld	hl, 6
	push	hl
	call	_gfx_SetColor
	pop	hl
	ld	a, (_menuSelect)
	ld	l, a
	rlc	l
	sbc	hl, hl
	ld	l, a
	ld	de, 60
	push	de
	pop	bc
	call	__imulu
	ld	de, 32
	add	hl, de
	ld	de, 52
	push	de
	ld	de, 182
	push	de
	push	hl
	ld	hl, 69
	push	hl
	call	_gfx_Rectangle
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	ld	a, (_menuSelect)
	ld	l, a
	rlc	l
	sbc	hl, hl
	push	hl
	pop	de
	ld	e, a
	push	de
	pop	hl
	ld	bc, 3
	call	__imulu
	push	hl
	pop	bc
	ld	hl, _pauseButtonOn_tiles_data
	add	hl, bc
	ld	iy, (hl)
	ex	de, hl
	ld	bc, 60
	call	__imulu
	ld	de, 33
	add	hl, de
	push	hl
	ld	hl, 70
	push	hl
	push	iy
	call	_gfx_Sprite
	pop	hl
	pop	hl
	pop	hl
	or	a, a
	sbc	hl, hl
BB1_198:
	ld	bc, 255
	call	__iand
	ld	a, l
	cp	a, -116
	jq	nc, BB1_200
	ld	de, (_pauseButtonOn_tiles_data+9)
	push	hl
	pop	iy
	ld	bc, 90
	add	iy, bc
	ld	a, (_menuSelect)
	ld	(ix + -3), hl
	ld	l, a
	rlc	l
	sbc	hl, hl
	ld	l, a
	ld	bc, 60
	call	__imulu
	ld	bc, 33
	add	hl, bc
	push	hl
	push	iy
	push	de
	call	_gfx_Sprite
	pop	hl
	pop	hl
	pop	hl
	ld	hl, (ix + -3)
	ld	de, 20
	add	hl, de
	jq	BB1_198
BB1_200:
	ld	de, (_pauseButtonOn_tiles_data+12)
	ld	a, (_menuSelect)
	ld	l, a
	rlc	l
	sbc	hl, hl
	ld	l, a
	ld	bc, 60
	call	__imulu
	ld	bc, 33
	add	hl, bc
	push	hl
	ld	hl, 230
	push	hl
	push	de
	call	_gfx_Sprite
	pop	hl
	pop	hl
	pop	hl
	ld	a, (_menuSelect)
	ld	l, a
	rlc	l
	sbc	hl, hl
	push	hl
	pop	de
	ld	e, a
	push	de
	pop	hl
	ld	bc, 7
	call	__imulu
	push	hl
	pop	bc
	ld	hl, _pauseOptions
	add	hl, bc
	ld	(ix + -3), hl
	ld	hl, _pauseOptionY
	add	hl, de
	ld	a, (hl)
	ld	l, a
	rlc	l
	sbc	hl, hl
	push	hl
	pop	iy
	ld	iyl, a
	ex	de, hl
	ld	bc, 60
	call	__imulu
	ld	de, 47
	add	hl, de
	push	hl
	push	iy
	ld	hl, (ix + -3)
	push	hl
	call	_gfx_PrintStringXY
	pop	hl
	pop	hl
	pop	hl
	ld	iy, -720866
	ld	l, (iy)
	ld	h, (iy + 1)
	ld.sis	bc, 1
	call	__sand
	ld	a, l
	ld	l, 1
	xor	a, l
	bit	0, a
	jq	nz, BB1_204
	ld	a, (_menuSelect)
	ld	l, a
	inc	l
	cp	a, 2
	call	__setflag
	ld	a, 0
	jq	p, BB1_203
	ld	a, l
BB1_203:
	ld	(_menuSelect), a
BB1_204:
	ld	l, (iy)
	ld	h, (iy + 1)
	ld	a, l
	bit	3, a
	jq	z, BB1_208
	ld	a, (_menuSelect)
	ld	l, a
	dec	l
	cp	a, 1
	call	__setflag
	ld	a, 2
	jq	m, BB1_207
	ld	a, l
BB1_207:
	ld	(_menuSelect), a
BB1_208:
	ld	hl, 2
	push	hl
	call	_gfx_SetColor
	pop	hl
	ld	a, (_menuSelect)
	ld	l, a
	rlc	l
	sbc	hl, hl
	ld	l, a
	ld	bc, 60
	call	__imulu
	ld	de, 32
	add	hl, de
	ld	de, 52
	push	de
	ld	de, 182
	push	de
	push	hl
	ld	hl, 69
	push	hl
	call	_gfx_Rectangle
	pop	hl
BB1_209:
	pop	hl
	pop	hl
	pop	hl
BB1_210:
	ld	hl, 1
	push	hl
	call	_gfx_Blit
	pop	hl
	ld	hl, -720866
BB1_211:
	push	de
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	ld	l, e
	ld	h, d
	pop	de
	ld.sis	bc, 1
	call	__sand
	ld	a, l
	ld	l, 1
	xor	a, l
	xor	a, l
	bit	0, a
	jq	nz, BB1_213
	ld	hl, -720866
	push	de
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	ld	l, e
	ld	h, d
	pop	de
	ld	a, l
	bit	3, a
	jq	z, BB1_192
BB1_213:
	ld	hl, -720868
	push	de
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	ld	l, e
	ld	h, d
	pop	de
	ld	a, l
	bit	6, a
	jq	nz, BB1_192
	call	_kb_Scan
	ld	hl, -720866
	jq	BB1_211
BB1_215:
	ld	a, 1
	ld	(_debounced), a
	ld	hl, 6
	push	hl
	call	_gfx_SetColor
	pop	hl
	ld	a, (_menuSelect)
	ld	l, a
	rlc	l
	sbc	hl, hl
	ld	l, a
	ld	de, 60
	push	de
	pop	bc
	call	__imulu
	ld	de, 32
	add	hl, de
	ld	de, 52
	push	de
	ld	de, 182
	push	de
	push	hl
	ld	hl, 69
	push	hl
	call	_gfx_FillRectangle
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	ld	a, (_menuSelect)
	ld	l, a
	rlc	l
	sbc	hl, hl
	push	hl
	pop	de
	ld	e, a
	push	de
	pop	hl
	ld	bc, 3
	call	__imulu
	push	hl
	pop	bc
	ld	hl, _pauseButtonOff_tiles_data
	add	hl, bc
	ld	iy, (hl)
	ex	de, hl
	ld	bc, 60
	call	__imulu
	ld	de, 35
	add	hl, de
	push	hl
	ld	hl, 80
	push	hl
	push	iy
	call	_gfx_Sprite
	pop	hl
	pop	hl
	pop	hl
	ld	de, (_pauseButtonOff_tiles_data+12)
	ld	a, (_menuSelect)
	ld	l, a
	rlc	l
	sbc	hl, hl
	ld	l, a
	ld	bc, 60
	call	__imulu
	ld	bc, 35
	add	hl, bc
	push	hl
	ld	hl, 220
	push	hl
	push	de
	call	_gfx_Sprite
	pop	hl
	pop	hl
	pop	hl
	or	a, a
	sbc	hl, hl
BB1_216:
	ld	bc, 255
	call	__iand
	ld	a, l
	cp	a, 120
	jq	nc, BB1_218
	ld	de, (_pauseButtonOff_tiles_data+9)
	push	hl
	pop	iy
	ld	bc, 100
	add	iy, bc
	ld	a, (_menuSelect)
	ld	(ix + -3), hl
	ld	l, a
	rlc	l
	sbc	hl, hl
	ld	l, a
	ld	bc, 60
	call	__imulu
	ld	bc, 35
	add	hl, bc
	push	hl
	push	iy
	push	de
	call	_gfx_Sprite
	pop	hl
	pop	hl
	pop	hl
	ld	hl, (ix + -3)
	ld	de, 20
	add	hl, de
	jq	BB1_216
BB1_218:
	ld	hl, 2
	push	hl
	call	_gfx_SetColor
	pop	hl
	ld	a, (_menuSelect)
	ld	l, a
	rlc	l
	sbc	hl, hl
	ld	l, a
	ld	de, 60
	push	de
	pop	bc
	call	__imulu
	ld	de, 34
	add	hl, de
	ld	de, 48
	push	de
	ld	de, 162
	push	de
	push	hl
	ld	hl, 79
	push	hl
	call	_gfx_Rectangle
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	ld	a, (_menuSelect)
	ld	l, a
	rlc	l
	sbc	hl, hl
	push	hl
	pop	de
	ld	e, a
	push	de
	pop	hl
	ld	bc, 7
	call	__imulu
	push	hl
	pop	bc
	ld	hl, _pauseOptions
	add	hl, bc
	ld	(ix + -3), hl
	ld	hl, _pauseOptionY
	add	hl, de
	ld	a, (hl)
	ld	l, a
	rlc	l
	sbc	hl, hl
	push	hl
	pop	iy
	ld	iyl, a
	ex	de, hl
	ld	bc, 60
	call	__imulu
	ld	de, 47
	add	hl, de
	push	hl
	push	iy
	ld	hl, (ix + -3)
	push	hl
	call	_gfx_PrintStringXY
	jq	BB1_209
BB1_219:
	ld	a, (_menuSelect)
	ld	l, a
	or	a, a
	jq	z, BB1_222
	ld	a, l
	cp	a, 1
	jq	z, BB1_19
	jq	BB1_186
BB1_45:
	ex	de, hl
	ld	de, 21
	or	a, a
	sbc	hl, de
	ld	iy, 0
	jq	nc, BB1_53
	xor	a, a
BB1_47:
	cp	a, 3
	jq	nc, BB1_52
	lea	bc, iy + 0
	ld	c, a
	push	bc
	pop	hl
	add	hl, hl
	ex	de, hl
	ld	iy, _zapperX
	add	iy, de
	ld	l, (iy)
	ld	h, (iy + 1)
	ld.sis	de, 331
	or	a, a
	sbc.sis	hl, de
	jq	c, BB1_50
	ld.sis	hl, 330
	ld	(iy), l
	ld	(iy + 1), h
	ld	(ix + -3), bc
	call	_random
	ld	de, 3
	push	de
	pop	bc
	call	__iremu
	ld	a, l
	add	a, 2
	ld	hl, _zapperLength
	ld	de, (ix + -3)
	add	hl, de
	ld	(ix + -6), hl
	ld	(hl), a
	call	_random
	push	hl
	pop	de
	ld	hl, (ix + -6)
	ld	a, (hl)
	ld	bc, 0
	ld	c, a
	ld	hl, 18
	or	a, a
	sbc	hl, bc
	push	hl
	pop	bc
	ex	de, hl
	call	__iremu
	ld	bc, 10
	call	__imulu
	push	hl
	pop	iy
	ld	de, 20
	add	iy, de
	ld	hl, (ix + -3)
	ld	bc, 3
	call	__imulu
	push	hl
	pop	de
	ld	hl, _zapperY
	add	hl, de
	ld	(hl), iy
	ld	a, 3
BB1_50:
	inc	a
	ld	iy, 0
	jq	BB1_47
BB1_51:
	ld	hl, 1466
	ld	(_missileDelay), hl
	jq	BB1_44
BB1_52:
	ld	hl, 200
	ld	(_spawnDelay), hl
	jq	BB1_53
BB1_222:
	ld	a, (_health)
BB1_223:
	cp	a, 1
	call	__setflag
	jq	p, BB1_230
	ld	hl, 1
	push	hl
	call	_gfx_FillScreen
	pop	hl
	ld	hl, 4
	push	hl
	push	hl
	call	_gfx_SetTextScale
	pop	hl
	pop	hl
	ld	hl, 100
	push	hl
	ld	hl, 15
	push	hl
	ld	hl, L_.str
	push	hl
	call	_gfx_PrintStringXY
	pop	hl
	pop	hl
	pop	hl
	call	_gfx_SwapDraw
BB1_225:
	call	_kb_AnyKey
	or	a, a
	jq	z, BB1_228
	call	_kb_Scan
	jq	BB1_225
BB1_227:
	call	_kb_Scan
BB1_228:
	call	_kb_AnyKey
	or	a, a
	jq	z, BB1_227
	ld	hl, -720868
	push	de
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	ld	l, e
	ld	h, d
	pop	de
	ld	a, l
	cp	a, 64
	jq	nz, BB1_19
BB1_230:
	ld	sp, ix
	pop	ix
	jp	_gfx_End
	section	.text,"ax",@progbits

	section	.rodata,"a",@progbits
	public	_coin_max
_coin_max:
	db	"",036o,025o,030o,032o,021o,036o

	section	.rodata,"a",@progbits
	public	_ctx
_ctx:
	dl	0
	dl	12
	dl	24
	dl	36
	dl	48
	dl	60
	dl	72
	dl	84
	dl	96
	dl	108
	dl	0
	dl	12
	dl	24
	dl	36
	dl	48
	dl	60
	dl	72
	dl	84
	dl	96
	dl	108
	dl	0
	dl	12
	dl	24
	dl	36
	dl	48
	dl	60
	dl	72
	dl	84
	dl	96
	dl	108
	dl	0
	dl	24
	dl	48
	dl	60
	dl	0
	dl	24
	dl	48
	dl	72
	dl	0
	dl	12
	dl	24
	dl	48
	dl	60
	dl	0
	dl	24
	dl	48
	dl	72
	dl	0
	dl	24
	dl	48
	dl	60
	db	27 dup 0
	dl	0
	dl	12
	dl	72
	dl	84
	dl	144
	dl	156
	dl	0
	dl	12
	dl	36
	dl	48
	dl	72
	dl	84
	dl	108
	dl	120
	dl	144
	dl	156
	dl	180
	dl	192
	dl	36
	dl	48
	dl	108
	dl	120
	dl	180
	dl	192
	dl	0
	dl	0
	dl	0
	dl	0
	dl	0
	dl	0
	dl	84
	dl	84
	dl	96
	dl	0
	dl	12
	dl	24
	dl	36
	dl	48
	dl	60
	dl	72
	dl	84
	dl	96
	dl	108
	dl	0
	dl	12
	dl	24
	dl	36
	dl	48
	dl	60
	dl	72
	dl	84
	dl	96
	dl	108
	dl	84
	dl	96
	dl	84
	dl	0
	dl	0
	dl	0
	dl	0
	dl	24
	dl	12
	dl	24
	dl	36
	dl	48
	dl	0
	dl	24
	dl	12
	dl	24
	dl	36
	dl	24
	dl	48
	dl	0
	dl	12
	dl	24
	dl	36
	dl	24
	db	39 dup 0
	dl	0
	dl	24
	dl	48
	dl	72
	dl	96
	dl	12
	dl	36
	dl	60
	dl	84
	dl	108
	dl	0
	dl	24
	dl	48
	dl	72
	dl	96
	dl	12
	dl	36
	dl	60
	dl	84
	dl	108
	dl	0
	dl	24
	dl	48
	dl	72
	dl	96
	dl	12
	dl	36
	dl	60
	dl	84
	dl	108

	section	.rodata,"a",@progbits
	public	_cty
_cty:
	db	"",000o,000o,000o,000o,000o,000o,000o,000o,000o,000o,014o,014o,014o,014o,014o,014o,014o,014o,014o,014o,030o,030o,030o,030o,030o,030o,030o,030o,030o,030o
	db	"",000o,000o,000o,000o,014o,014o,014o,014o,030o,030o,030o,030o,030o,"$$$$0000"
	db	9 dup 0
	db	"",000o,000o,000o,000o,000o,000o,014o,014o,014o,014o,014o,014o,014o,014o,014o,014o,014o,014o,030o,030o,030o,030o,030o,030o,000o,000o,000o,000o,000o,000o
	db	"",000o,014o,014o,030o,030o,030o,030o,030o,030o,030o,030o,030o,030o,"$$$$$$$$$$00<",000o,000o,000o,000o
	db	"",000o,014o,014o,014o,014o,030o,030o,"$$$00<<<<H"
	db	13 dup 0
	db	"",000o,000o,000o,000o,000o,014o,014o,014o,014o,014o,030o,030o,030o,030o,030o,"$$$$$00000<<<<<"

	section	.rodata,"a",@progbits
	public	_laserMax
_laserMax:
	db	"",001o,002o,004o,004o,007o

	section	.rodata,"a",@progbits
	public	_lsrY
_lsrY:
	db	"r",000o,000o,000o,000o,000o,000o
	db	"",030o,314o,000o,000o,000o,000o,000o
	db	"",030o,220o,256o,314o,000o,000o,000o
	db	"",030o,"6T",314o,000o,000o,000o
	db	"",030o,"6Tr",220o,256o,314o

	section	.rodata,"a",@progbits
	public	_halfLife
_halfLife:
	db	"l",000o,000o,000o,000o,000o,000o
	db	"ll",000o,000o,000o,000o,000o
	db	"llll",000o,000o,000o
	db	"llll",000o,000o,000o
	db	"ll",330o,330o,330o,"ll"

	section	.data,"aw",@progbits
	public	_avatarAnimate
_avatarAnimate:
	db	1

	section	.data,"aw",@progbits
	public	_displacement
_displacement:
	db	3

	section	.data,"aw",@progbits
	public	_exhaustAnimate
_exhaustAnimate:
	db	18

	section	.data,"aw",@progbits
	public	_spawnDelay
_spawnDelay:
	dl	200

	section	.data,"aw",@progbits
	public	_pauseOptions
_pauseOptions:
	db	"Quit",000o,000o,000o
	db	"Retry",000o,000o
	db	"Resume",000o

	section	.data,"aw",@progbits
	public	_pauseOptionY
_pauseOptionY:
	db	"xgZ"

	section	.data,"aw",@progbits
	public	_MAvalue
_MAvalue:
	db	255

	section	.bss,"aw",@nobits
	public	_coinFormation
_coinFormation:
	rb	1

	section	.bss,"aw",@nobits
	public	_coinX
_coinX:
	rb	90

	section	.bss,"aw",@nobits
	public	_zapperLength
_zapperLength:
	rb	3

	section	.bss,"aw",@nobits
	public	_zapperX
_zapperX:
	rb	6

	section	.bss,"aw",@nobits
	public	_missileX
_missileX:
	rb	2

	section	.bss,"aw",@nobits
	public	_laserX
_laserX:
	rb	1

	section	.bss,"aw",@nobits
	public	_zapper_tiles_flipped
_zapper_tiles_flipped:
	rb	9

	section	.bss,"aw",@nobits
	public	_electric_animation
_electric_animation:
	rb	24

	section	.bss,"aw",@nobits
	public	_powering_tiles_flipped
_powering_tiles_flipped:
	rb	12

	section	.bss,"aw",@nobits
	public	_firing_tiles_flipped
_firing_tiles_flipped:
	rb	9

	section	.bss,"aw",@nobits
	public	_shutdown_tiles_flipped
_shutdown_tiles_flipped:
	rb	9

	section	.bss,"aw",@nobits
	public	_scrollSpeed
_scrollSpeed:
	rb	1

	section	.bss,"aw",@nobits
	public	_incrementDelay
_incrementDelay:
	rb	2

	section	.bss,"aw",@nobits
	public	_avatarX
_avatarX:
	rb	2

	section	.bss,"aw",@nobits
	public	_avatarY
_avatarY:
	rb	1

	section	.bss,"aw",@nobits
	public	_holdTime
_holdTime:
	rb	1

	section	.bss,"aw",@nobits
	public	_health
_health:
	rb	1

	section	.bss,"aw",@nobits
	public	_distance
_distance:
	rb	4

	section	.bss,"aw",@nobits
	public	_monies
_monies:
	rb	4

	section	.bss,"aw",@nobits
	public	_deadLasers
_deadLasers:
	rb	1

	section	.bss,"aw",@nobits
	public	_backgroundScroll
_backgroundScroll:
	rb	3

	section	.bss,"aw",@nobits
	public	_randObject
_randObject:
	rb	1

	section	.bss,"aw",@nobits
	public	_laserFormation
_laserFormation:
	rb	1

	section	.bss,"aw",@nobits
	public	_laserY
_laserY:
	rb	7

	section	.bss,"aw",@nobits
	public	_laserLifetime
_laserLifetime:
	rb	21

	section	.bss,"aw",@nobits
	public	_randVar
_randVar:
	rb	1

	section	.bss,"aw",@nobits
	public	_coinY
_coinY:
	rb	30

	section	.bss,"aw",@nobits
	public	_coinAnimate
_coinAnimate:
	rb	30

	section	.bss,"aw",@nobits
	public	_missileY
_missileY:
	rb	1

	section	.bss,"aw",@nobits
	public	_missileDelay
_missileDelay:
	rb	3

	section	.bss,"aw",@nobits
	public	_zapperY
_zapperY:
	rb	9

	section	.bss,"aw",@nobits
	public	_missile_icon_animate
_missile_icon_animate:
	rb	1

	section	.bss,"aw",@nobits
	public	_missileAnimate
_missileAnimate:
	rb	1

	section	.bss,"aw",@nobits
	public	_laserAnimate
_laserAnimate:
	rb	1

	section	.bss,"aw",@nobits
	public	_randVar1
_randVar1:
	rb	1

	section	.bss,"aw",@nobits
	public	_zapperAnimate
_zapperAnimate:
	rb	3

	section	.bss,"aw",@nobits
	public	_frameTime
_frameTime:
	rb	1

	section	.bss,"aw",@nobits
	public	_debounced
_debounced:
	rb	1

	section	.bss,"aw",@nobits
	public	_menuSelect
_menuSelect:
	rb	1

	section	.rodata,"a",@progbits
	private	L_.str
L_.str:
	db	"U is ded lol.",000o

	section	.bss,"aw",@nobits
	public	_scrollIncrement
_scrollIncrement:
	rb	1

	ident	"clang version 12.0.0 (https://github.com/jacobly0/llvm-project a4fd568b012f0b193e341952bf10624f559064fd)"
	extern	_random
	extern	_missileIncoming_tiles_data
	extern	_powering_tiles_data
	extern	__ldivu
	extern	__Unwind_SjLj_Register
	extern	_malloc
	extern	_gfx_SetTextFGColor
	extern	_electric_tiles_data
	extern	_gfx_Begin
	extern	_gfx_Line
	extern	_gfx_SetPalette
	extern	_gfx_RotateSpriteHalf
	extern	__sand
	extern	_laser_tiles_data
	extern	__ladd
	extern	_shutdown_tiles_data
	extern	_background_data
	extern	_gfx_PrintInt
	extern	__idivu
	extern	__setflag
	extern	_sparkle_data
	extern	_gfx_Blit
	extern	_gfx_Circle
	extern	_nozzle_data
	extern	__iand
	extern	_gfx_FillRectangle
	extern	_gfx_AllocSprite
	extern	_gfx_Sprite
	extern	_delay
	extern	__bdivs
	extern	_firing_tiles_data
	extern	__bdivu
	extern	_jetpack_palette
	extern	_gfx_RLETSprite
	extern	__frameset
	extern	_avatar_tiles_data
	extern	_kb_AnyKey
	extern	_gfx_SetTransparentColor
	extern	_coin_tiles_data
	extern	_kb_Scan
	extern	_exhaust_tiles_data
	extern	_missileWarning_tiles_data
	extern	__ior
	extern	_pauseButtonOff_tiles_data
	extern	_gfx_FlipSpriteX
	extern	_gfx_FlipSpriteY
	extern	__ishru
	extern	_gfx_SwapDraw
	extern	_gfx_SetDraw
	extern	_zapper_tiles_data
	extern	__sdivu
	extern	__Unwind_SjLj_Unregister
	extern	__iremu
	extern	_gfx_FillScreen
	extern	__imulu
	extern	_missile_tiles_data
	extern	_gfx_Rectangle
	extern	_gfx_SetColor
	extern	__bshl
	extern	_beam_data
	extern	_gfx_TransparentSprite_NoClip
	extern	_gfx_PrintStringXY
	extern	_gfx_End
	extern	_gfx_SetTextXY
	extern	_gfx_TransparentSprite
	extern	_pauseButtonOn_tiles_data
	extern	_gfx_SetTextScale
