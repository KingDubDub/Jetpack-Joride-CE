	section	.text,"ax",@progbits
	assume	adl = 1
	section	.text,"ax",@progbits
	public	_CopyPasta
_CopyPasta:
	ld	hl, -18
	call	__frameset
	ld	iy, (ix + 6)
	ld	l, (iy)
	ld	de, 0
	push	de
	pop	bc
	ld	c, l
	ld	a, (iy + 1)
	push	de
	pop	hl
	ld	l, a
	ld	(ix + -3), bc
	call	__imulu
	ld	(ix + -6), hl
	ld	hl, (ix + 9)
	ld	a, (hl)
	push	de
	pop	hl
	ld	l, a
	ld	a, (ix + 15)
	ld	e, a
	ld	(ix + -12), hl
	push	de
	pop	bc
	call	__imulu
	ld	de, (ix + 12)
	add	hl, de
	ex	de, hl
	ld	iy, (ix + 9)
	lea	hl, iy + 2
	add	hl, de
	push	hl
	pop	bc
	ld	iy, (ix + 6)
	lea	hl, iy + 2
	ld	(ix + -15), hl
	ld	iy, 0
BB0_1:
	lea	hl, iy + 0
	ld	de, (ix + -6)
	or	a, a
	sbc	hl, de
	jq	nc, BB0_2
	lea	de, iy + 0
	ld	hl, (ix + -15)
	add	hl, de
	ld	de, (ix + -3)
	push	de
	push	hl
	ld	(ix + -18), bc
	push	bc
	ld	(ix + -9), iy
	call	_memcpy
	ld	iy, (ix + -9)
	pop	hl
	pop	hl
	pop	hl
	ld	de, (ix + -3)
	add	iy, de
	ld	de, (ix + -12)
	ld	hl, (ix + -18)
	add	hl, de
	push	hl
	pop	bc
	jq	BB0_1
BB0_2:
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_delObjects
_delObjects:
	xor	a, a
	ld	iy, 0
	ld	de, 90
BB1_1:
	lea	hl, iy + 0
	or	a, a
	sbc	hl, de
	jq	z, BB1_2
	lea	bc, iy + 0
	ld	hl, _coins
	add	hl, bc
	ld	bc, 2000
	ld	(hl), bc
	ld	bc, 3
	add	iy, bc
	jq	BB1_1
BB1_2:
	ld	bc, 3
	ld	iy, 0
	lea	de, iy + 0
BB1_4:
	push	de
	pop	hl
	or	a, a
	sbc	hl, bc
	jq	z, BB1_5
	ld	hl, _zappers+12
	add	hl, de
	ld	(hl), 0
	inc	de
	jq	BB1_4
BB1_5:
	ld	bc, 9
BB1_7:
	lea	hl, iy + 0
	or	a, a
	sbc	hl, bc
	jq	z, BB1_9
	lea	de, iy + 0
	ld	hl, _zappers
	add	hl, de
	ld	de, 331
	ld	(hl), de
	ld	de, 3
	add	iy, de
	jq	BB1_7
BB1_9:
	ld	hl, 1467
	ld	(_missiles), hl
	ld	(_laserX), a
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_draw_button
_draw_button:
	ld	hl, -12
	call	__frameset
	ld	a, (ix + 6)
	ld	iy, _pauseButtonOn_tiles_data
	ld	de, 0
	ld	e, a
	ld	bc, 3
	push	de
	pop	hl
	call	__imulu
	push	hl
	pop	bc
	add	iy, bc
	ld	iy, (iy)
	ld	(ix + -9), de
	ex	de, hl
	ld	bc, 60
	call	__imulu
	ld	(ix + -12), hl
	ld	a, l
	add	a, 33
	ld	l, a
	ld	(ix + -6), hl
	push	hl
	ld	hl, 70
	push	hl
	push	iy
	call	_gfx_Sprite_NoClip
	pop	hl
	pop	hl
	pop	hl
	or	a, a
	sbc	hl, hl
BB2_1:
	ld	bc, 255
	call	__iand
	ld	a, l
	cp	a, -116
	jq	nc, BB2_2
	ld	(ix + -3), hl
	ld	hl, (ix + -3)
	ld	de, 90
	add	hl, de
	ld	de, (ix + -6)
	push	de
	push	hl
	ld	hl, _pauseButtonOn_tile_3_data
	push	hl
	call	_gfx_Sprite_NoClip
	pop	hl
	pop	hl
	pop	hl
	ld	hl, (ix + -3)
	ld	de, 20
	add	hl, de
	jq	BB2_1
BB2_2:
	ld	hl, (ix + -6)
	push	hl
	ld	hl, 230
	push	hl
	ld	hl, _pauseButtonOn_tile_4_data
	push	hl
	call	_gfx_Sprite_NoClip
	pop	hl
	pop	hl
	pop	hl
	ld	hl, 2
	push	hl
	call	_gfx_SetTextFGColor
	pop	hl
	ld	hl, 3
	push	hl
	push	hl
	call	_gfx_SetTextScale
	pop	hl
	pop	hl
	ld	bc, 7
	ld	de, (ix + -9)
	push	de
	pop	hl
	call	__imulu
	push	hl
	pop	bc
	ld	iy, _pauseOptions
	add	iy, bc
	ld	hl, _pauseOptionX
	add	hl, de
	ld	a, (hl)
	ld	l, a
	rlc	l
	sbc	hl, hl
	push	hl
	pop	bc
	ld	c, a
	ld	de, 47
	ld	hl, (ix + -12)
	add	hl, de
	push	hl
	push	bc
	push	iy
	call	_gfx_PrintStringXY
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_save_state
_save_state:
	ld	hl, L_.str
	ld	de, L_.str.1
	push	de
	push	hl
	call	_ti_Open
	ld	l, a
	pop	de
	pop	de
	ld	(_savegame), a
	push	hl
	ld	hl, 1
	push	hl
	ld	hl, 17
	push	hl
	ld	hl, _save_data
	push	hl
	call	_ti_Write
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	ld	a, (_savegame)
	ld	l, a
	push	hl
	ld	hl, 1
	push	hl
	push	hl
	ld	hl, _scrollSpeed
	push	hl
	call	_ti_Write
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	ld	a, (_savegame)
	ld	l, a
	push	hl
	ld	hl, 1
	push	hl
	inc	hl
	push	hl
	ld	hl, _incrementDelay
	push	hl
	call	_ti_Write
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	ld	a, (_savegame)
	ld	l, a
	push	hl
	ld	hl, 1
	push	hl
	ld	hl, 3
	push	hl
	ld	hl, _backgroundScroll
	push	hl
	call	_ti_Write
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	ld	a, (_savegame)
	ld	l, a
	push	hl
	ld	hl, 1
	push	hl
	ld	hl, 3
	push	hl
	ld	hl, _spawnDelay
	push	hl
	call	_ti_Write
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	ld	a, (_savegame)
	ld	l, a
	push	hl
	ld	hl, 1
	push	hl
	ld	hl, 11
	push	hl
	ld	hl, _avatar
	push	hl
	call	_ti_Write
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	ld	a, (_savegame)
	ld	l, a
	push	hl
	ld	hl, 1
	push	hl
	ld	hl, 8
	push	hl
	ld	hl, _jetpackEntity
	push	hl
	call	_ti_Write
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	ld	a, (_savegame)
	ld	l, a
	push	hl
	ld	hl, 1
	push	hl
	ld	hl, 151
	push	hl
	ld	hl, _coins
	push	hl
	call	_ti_Write
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	ld	a, (_savegame)
	ld	l, a
	push	hl
	ld	hl, 1
	push	hl
	ld	hl, 15
	push	hl
	ld	hl, _zappers
	push	hl
	call	_ti_Write
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	ld	a, (_savegame)
	ld	l, a
	push	hl
	ld	hl, 1
	push	hl
	push	hl
	ld	hl, _zapperAnimate
	push	hl
	call	_ti_Write
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	ld	a, (_savegame)
	ld	l, a
	push	hl
	ld	hl, 1
	push	hl
	ld	hl, 7
	push	hl
	ld	hl, _missiles
	push	hl
	call	_ti_Write
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	ld	a, (_savegame)
	ld	l, a
	push	hl
	ld	hl, 1
	push	hl
	ld	hl, 28
	push	hl
	ld	hl, _lasers
	push	hl
	call	_ti_Write
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	ld	a, (_savegame)
	ld	l, a
	push	hl
	ld	hl, 1
	push	hl
	push	hl
	ld	hl, _laserX
	push	hl
	call	_ti_Write
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	ld	a, (_savegame)
	ld	l, a
	push	hl
	ld	hl, 1
	push	hl
	push	hl
	ld	hl, _laserFormation
	push	hl
	call	_ti_Write
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	ld	a, (_savegame)
	ld	l, a
	push	hl
	ld	hl, 1
	push	hl
	push	hl
	ld	hl, _deadLasers
	push	hl
	call	_ti_Write
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	ld	a, (_savegame)
	ld	l, a
	push	hl
	ld	hl, 1
	push	hl
	push	hl
	ld	hl, _laserAnimate
	push	hl
	call	_ti_Write
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_main
_main:
	ld	hl, -31
	call	__frameset
	ld	iy, -851900
	ld	l, 10
	ld	(ix + -23), l
	ld	(ix + -22), h
	ld	l, 60
	ld	(ix + -25), l
	ld	(ix + -24), h
	ld	hl, (iy)
	ld	a, (iy + 3)
	push	hl
	call	_srand
	pop	hl
	call	_ti_CloseAll
	ld	hl, L_.str.2
	push	hl
	ld	hl, L_.str
	push	hl
	call	_ti_Open
	pop	hl
	pop	hl
	ld	(_savegame), a
	or	a, a
	call	z, _save_state
	ld	hl, _malloc
	push	hl
	ld	hl, 37
	push	hl
	push	hl
	call	_gfx_AllocSprite
	pop	de
	pop	de
	pop	de
	ld	(_barryHit_resized), hl
	ld	hl, _malloc
	push	hl
	ld	hl, 37
	push	hl
	push	hl
	call	_gfx_AllocSprite
	pop	de
	pop	de
	pop	de
	ld	(_barryHit_rotated), hl
	ld	de, 1370
	ld	bc, 2
BB4_3:
	push	bc
	pop	hl
	or	a, a
	sbc	hl, de
	jq	z, BB4_5
	ld	hl, (_barryHit_resized)
	add	hl, bc
	ld	(hl), 0
	inc	bc
	jq	BB4_3
BB4_5:
	ld	hl, _malloc
	push	hl
	ld	hl, 25
	push	hl
	push	hl
	call	_gfx_AllocSprite
	pop	de
	pop	de
	pop	de
	ld	(_jetpack_resized), hl
	ld	hl, _malloc
	push	hl
	ld	hl, 25
	push	hl
	push	hl
	call	_gfx_AllocSprite
	pop	de
	pop	de
	pop	de
	ld	(_jetpack_rotated), hl
	ld	de, 626
	ld	bc, 2
BB4_6:
	push	bc
	pop	hl
	or	a, a
	sbc	hl, de
	jq	z, BB4_8
	ld	hl, (_jetpack_resized)
	add	hl, bc
	ld	(hl), 0
	inc	bc
	jq	BB4_6
BB4_8:
	call	_random
	ld	bc, 3
	call	__iremu
	call	__imulu
	push	hl
	pop	de
	ld	hl, _barryHit_array_data
	add	hl, de
	ld	hl, (hl)
	ld	de, (_barryHit_resized)
	ld	bc, 0
	push	bc
	ld	bc, 6
	push	bc
	push	de
	push	hl
	call	_CopyPasta
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	ld	hl, (_jetpack_resized)
	ld	de, 0
	push	de
	ld	de, 2
	push	de
	push	hl
	ld	hl, _jetpack_data
	push	hl
	call	_CopyPasta
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	ld	de, 12
	ld	iy, 0
BB4_9:
	lea	hl, iy + 0
	or	a, a
	sbc	hl, de
	jq	z, BB4_11
	ld	hl, _malloc
	push	hl
	ld	hl, 32
	push	hl
	push	hl
	ld	(ix + -3), iy
	call	_gfx_AllocSprite
	pop	de
	pop	de
	pop	de
	ld	de, (ix + -3)
	ld	iy, _zapper_array_flipped
	add	iy, de
	ld	(iy), hl
	ld	iy, _zapper_array_data
	add	iy, de
	ld	de, (iy)
	push	hl
	push	de
	call	_gfx_FlipSpriteX
	ld	iy, (ix + -3)
	pop	hl
	pop	hl
	ld	de, 3
	add	iy, de
	ld	de, 12
	jq	BB4_9
BB4_11:
	ld	iy, 0
BB4_12:
	lea	hl, iy + 0
	or	a, a
	sbc	hl, de
	jq	z, BB4_14
	ld	hl, _malloc
	push	hl
	ld	hl, 15
	push	hl
	ld	hl, 19
	push	hl
	ld	(ix + -3), iy
	call	_gfx_AllocSprite
	pop	de
	pop	de
	pop	de
	ld	de, (ix + -3)
	ld	iy, _powering_tiles_flipped
	add	iy, de
	ld	(iy), hl
	ld	iy, _powering_tiles_data
	add	iy, de
	ld	de, (iy)
	push	hl
	push	de
	call	_gfx_FlipSpriteY
	ld	iy, (ix + -3)
	pop	hl
	pop	hl
	ld	de, 3
	add	iy, de
	ld	de, 12
	jq	BB4_12
BB4_14:
	ld	de, 9
	ld	iy, 0
BB4_15:
	lea	hl, iy + 0
	or	a, a
	sbc	hl, de
	jq	z, BB4_17
	ld	hl, _malloc
	push	hl
	ld	hl, 37
	push	hl
	ld	hl, 30
	push	hl
	ld	(ix + -3), iy
	call	_gfx_AllocSprite
	pop	de
	pop	de
	pop	de
	ld	de, (ix + -3)
	ld	iy, _firing_tiles_flipped
	add	iy, de
	ld	(iy), hl
	ld	iy, _firing_tiles_data
	add	iy, de
	ld	de, (iy)
	push	hl
	push	de
	call	_gfx_FlipSpriteY
	ld	iy, (ix + -3)
	pop	hl
	pop	hl
	ld	de, 3
	add	iy, de
	ld	de, 9
	jq	BB4_15
BB4_17:
	ld	iy, 0
BB4_18:
	lea	hl, iy + 0
	or	a, a
	sbc	hl, de
	jq	z, BB4_20
	ld	hl, _malloc
	push	hl
	ld	hl, 44
	push	hl
	ld	hl, 30
	push	hl
	ld	(ix + -3), iy
	call	_gfx_AllocSprite
	pop	de
	pop	de
	pop	de
	ld	de, (ix + -3)
	ld	iy, _shutdown_tiles_flipped
	add	iy, de
	ld	(iy), hl
	ld	iy, _shutdown_tiles_data
	add	iy, de
	ld	de, (iy)
	push	hl
	push	de
	call	_gfx_FlipSpriteY
	ld	iy, (ix + -3)
	pop	hl
	pop	hl
	ld	de, 3
	add	iy, de
	ld	de, 9
	jq	BB4_18
BB4_20:
	call	_gfx_Begin
	ld	hl, 1
	push	hl
	call	_gfx_SetDraw
	pop	hl
	or	a, a
	sbc	hl, hl
	push	hl
	ld	hl, 512
	push	hl
	ld	hl, _jetpack_palette
	push	hl
	call	_gfx_SetPalette
	pop	hl
	pop	hl
	pop	hl
	or	a, a
	sbc	hl, hl
	push	hl
	call	_gfx_SetTransparentColor
	pop	hl
	ld.sis	hl, 515
	ld	iy, -917456
	ld	(iy), l
	ld	(iy + 1), h
	ld	hl, -720896
	ld	a, (hl)
	or	a, 3
	ld	(hl), a
	ld	a, (_savegame)
	ld	l, a
	push	hl
	ld	hl, 1
	push	hl
	ld	hl, 17
	push	hl
	ld	hl, _save_data
	push	hl
	call	_ti_Read
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	ld	iy, _save_data+1
	lea	hl, iy + 3
	ld	(ix + -28), hl
	ld	iy, _save_data+9
	lea	hl, iy + 3
	ld	(ix + -15), hl
BB4_21:
	ld	hl, (_save_data+9)
	ld	a, (_save_data+12)
	ld	e, a
BB4_22:
	call	__lcmpzero
	jq	nz, BB4_24
	call	_delObjects
	or	a, a
	sbc	hl, hl
	push	hl
	pop	bc
	ld	(_save_data+9), bc
	ld	l, 0
	ld	a, l
	ld	(_save_data+12), a
	ld	e, 1
	ld	a, e
	ld	(_save_data), a
	ld	(_save_data+1), bc
	ld	a, l
	ld	(_save_data+4), a
	ld	bc, 24
	ld	(_avatar), bc
	ld	a, -71
	ld	(_avatar+3), a
	ld	a, l
	ld	(_avatar+4), a
	ld	(_avatar+5), a
	ld	a, e
	ld	(_avatar+7), a
	ld	a, 3
	ld	(_avatar+6), a
	ld	a, 18
	ld	(_avatar+8), a
	ld	a, l
	ld	(_avatar+9), a
	ld	(_avatar+10), a
	ld	(_jetpackEntity+7), a
	ld	a, 2
	ld	(_jetpackEntity+4), a
	ld	a, -1
	ld	(_missiles+6), a
	ld	a, 6
	ld	(_scrollSpeed), a
	ld	hl, _incrementDelay
	ld.sis	de, 0
	ld	(hl), e
	inc	hl
	ld	(hl), d
	ld	hl, 200
	ld	(_spawnDelay), hl
	inc	a
	ld	(_deadLasers), a
	jq	BB4_26
BB4_24:
	ld	a, (_savegame)
	ld	l, a
	push	hl
	ld	hl, 1
	push	hl
	push	hl
	ld	hl, _scrollSpeed
	push	hl
	call	_ti_Read
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	ld	a, (_savegame)
	ld	l, a
	push	hl
	ld	hl, 1
	push	hl
	inc	hl
	push	hl
	ld	hl, _incrementDelay
	push	hl
	call	_ti_Read
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	ld	a, (_savegame)
	ld	l, a
	push	hl
	ld	hl, 1
	push	hl
	ld	hl, 3
	push	hl
	ld	hl, _backgroundScroll
	push	hl
	call	_ti_Read
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	ld	a, (_savegame)
	ld	l, a
	push	hl
	ld	hl, 1
	push	hl
	ld	hl, 3
	push	hl
	ld	hl, _spawnDelay
	push	hl
	call	_ti_Read
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	ld	a, (_savegame)
	ld	l, a
	push	hl
	ld	hl, 1
	push	hl
	ld	hl, 11
	push	hl
	ld	hl, _avatar
	push	hl
	call	_ti_Read
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	ld	a, (_savegame)
	ld	l, a
	push	hl
	ld	hl, 1
	push	hl
	ld	hl, 8
	push	hl
	ld	hl, _jetpackEntity
	push	hl
	call	_ti_Read
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	ld	a, (_savegame)
	ld	l, a
	push	hl
	ld	hl, 1
	push	hl
	ld	hl, 151
	push	hl
	ld	hl, _coins
	push	hl
	call	_ti_Read
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	ld	a, (_savegame)
	ld	l, a
	push	hl
	ld	hl, 1
	push	hl
	ld	hl, 15
	push	hl
	ld	hl, _zappers
	push	hl
	call	_ti_Read
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	ld	a, (_savegame)
	ld	l, a
	push	hl
	ld	hl, 1
	push	hl
	push	hl
	ld	hl, _zapperAnimate
	push	hl
	call	_ti_Read
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	ld	a, (_savegame)
	ld	l, a
	push	hl
	ld	hl, 1
	push	hl
	ld	hl, 7
	push	hl
	ld	hl, _missiles
	push	hl
	call	_ti_Read
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	ld	a, (_savegame)
	ld	l, a
	push	hl
	ld	hl, 1
	push	hl
	ld	hl, 28
	push	hl
	ld	hl, _lasers
	push	hl
	call	_ti_Read
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	ld	a, (_savegame)
	ld	l, a
	push	hl
	ld	hl, 1
	push	hl
	push	hl
	ld	hl, _laserX
	push	hl
	call	_ti_Read
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	ld	a, (_savegame)
	ld	l, a
	push	hl
	ld	hl, 1
	push	hl
	push	hl
	ld	hl, _laserFormation
	push	hl
	call	_ti_Read
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	ld	a, (_savegame)
	ld	l, a
	push	hl
	ld	hl, 1
	push	hl
	push	hl
	ld	hl, _deadLasers
	push	hl
	call	_ti_Read
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	ld	a, (_savegame)
	ld	l, a
	push	hl
	ld	hl, 1
	push	hl
	push	hl
	ld	hl, _laserAnimate
	push	hl
	call	_ti_Read
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	call	_ti_CloseAll
BB4_26:
	call	_kb_Scan
	ld	iy, (_backgroundScroll)
	ld	a, (_scrollSpeed)
	ld	l, a
	rlc	l
	sbc	hl, hl
	push	hl
	pop	de
	ld	e, a
	lea	hl, iy + 0
	or	a, a
	sbc	hl, de
	ld	(ix + -3), hl
	ld	bc, 192
	add	iy, bc
	lea	hl, iy + 0
	ld	(ix + -6), de
	or	a, a
	sbc	hl, de
	push	hl
	pop	iy
	ld	hl, (ix + -3)
	ld	bc, 1
	or	a, a
	sbc	hl, bc
	call	__setflag
	jq	m, BB4_28
	ld	iy, (ix + -3)
BB4_28:
	ld	(_backgroundScroll), iy
	ld	hl, (_spawnDelay)
	ld	a, (_laserX)
	ld	(ix + -3), hl
	ld	bc, 1
	or	a, a
	sbc	hl, bc
	call	__setflag
	ld	iy, 0
	jq	p, BB4_34
	cp	a, 1
	call	__setflag
	jq	p, BB4_34
	call	_random
	ld	bc, 22
	call	__iremu
	push	hl
	pop	de
	ld	a, e
	ld	(_randObject), a
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	nz, BB4_36
	call	_random
	push	hl
	pop	iy
	ld	(ix + -3), iy
	ld	bc, 5
	call	__iremu
	push	hl
	pop	de
	ld	a, e
	ld	(_laserFormation), a
	ld	hl, _laserMax
	add	hl, de
	ld	a, (hl)
	or	a, a
	sbc	hl, hl
	ld	l, a
	ld	(ix + -9), hl
	lea	hl, iy + 0
	call	__idivu
	push	hl
	pop	de
	or	a, a
	sbc	hl, hl
	or	a, a
	sbc	hl, de
	ld	bc, 35
	call	__imulu
	push	hl
	pop	de
	ld	hl, _lsrY
	push	hl
	pop	iy
	add	iy, de
	ld	hl, (ix + -3)
	ld	bc, 7
	call	__imulu
	push	hl
	pop	bc
	add	iy, bc
	ld	(ix + -6), iy
	ld	iy, _halfLife
	add	iy, de
	ld	de, (ix + -9)
	add	iy, bc
	ld	(ix + -3), iy
	ld	iy, _lasers+1
BB4_32:
	push	de
	pop	hl
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	z, BB4_40
	ld	hl, (ix + -6)
	ld	a, (hl)
	push	hl
	pop	bc
	ld	(iy + -1), a
	ld	hl, (ix + -3)
	ld	a, (hl)
	or	a, a
	sbc	hl, hl
	ld	l, a
	ld	(iy), hl
	dec	de
	inc	bc
	ld	(ix + -6), bc
	ld	hl, (ix + -3)
	inc	hl
	ld	(ix + -3), hl
	lea	iy, iy + 4
	jq	BB4_32
BB4_34:
	ld	hl, (ix + -3)
	ld	de, (ix + -6)
	or	a, a
	sbc	hl, de
	ld	(_spawnDelay), hl
	ld	hl, (_missileDelay)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	z, BB4_57
	or	a, a
	sbc	hl, de
	ld	(_missileDelay), hl
	jq	BB4_57
BB4_36:
	push	de
	pop	hl
	ld	bc, 3
	or	a, a
	sbc	hl, bc
	jq	nc, BB4_41
	call	_random
	ld	bc, 121
	call	__iremu
	ld	a, l
	add	a, 30
	ld	(_randVar), a
	call	_random
	ld	bc, 6
	call	__iremu
	ld	a, l
	ld	(_coins+150), a
	ld	a, (_randVar)
	ld	(ix + -6), a
	or	a, a
	sbc	hl, hl
	ld	(ix + -3), hl
	push	hl
	pop	bc
	ld	iy, 0
BB4_38:
	push	bc
	pop	hl
	ld	de, 30
	or	a, a
	sbc	hl, de
	jq	z, BB4_46
	ld	a, (_coins+150)
	lea	de, iy + 0
	ld	e, a
	push	de
	pop	hl
	ld	(ix + -9), bc
	ld	bc, 90
	call	__imulu
	push	hl
	pop	bc
	ld	hl, _ctx
	add	hl, bc
	ld	bc, (ix + -3)
	ld	(ix + -12), bc
	add	hl, bc
	ld	hl, (hl)
	ld	bc, 330
	add	hl, bc
	ld	iy, _coins
	ld	bc, (ix + -12)
	add	iy, bc
	ld	(iy), hl
	ex	de, hl
	ld	bc, 30
	call	__imulu
	ld	bc, (ix + -9)
	push	hl
	pop	de
	ld	hl, _cty
	add	hl, de
	add	hl, bc
	ld	a, (hl)
	add	a, (ix + -6)
	ld	iy, _coins
	add	iy, bc
	ld	(iy + 90), a
	ld	(iy + 120), 0
	ld	iy, 0
	inc	bc
	ld	de, 3
	ld	hl, (ix + -3)
	add	hl, de
	ld	(ix + -3), hl
	jq	BB4_38
BB4_40:
	ld	a, 1
	ld	(_laserX), a
	xor	a, a
	ld	(_deadLasers), a
	ld	a, (_scrollSpeed)
	ld	l, a
	rlc	l
	sbc	hl, hl
	ld	l, a
	ld	bc, 40
	call	__imulu
	ld	(_spawnDelay), hl
BB4_54:
	ld	iy, 0
	jq	BB4_57
BB4_41:
	push	de
	pop	hl
	ld	bc, 6
	or	a, a
	sbc	hl, bc
	jq	nc, BB4_47
	ld	a, 1
	ld	de, 0
BB4_43:
	ex	de, hl
	bit	0, a
	jq	z, BB4_53
	ld	(ix + -3), hl
	ld	bc, 3
	call	__imulu
	push	hl
	pop	de
	ld	iy, _missiles
	add	iy, de
	ld	hl, (iy)
	ld	de, 1467
	or	a, a
	sbc	hl, de
	ld	a, 0
	ld	de, 1
	jq	c, BB4_43
	ld	hl, 1466
	ld	(iy), hl
	call	_random
	ld	bc, 17
	call	__iremu
	ld	e, (ix + -23)
	ld	d, (ix + -22)
	ld	d, l
	ld	(ix + -23), e
	ld	(ix + -22), d
	ld	l, e
	ld	h, d
	mlt	hl
	ld	a, l
	add	a, 20
	ld	hl, _missiles+3
	ld	de, (ix + -3)
	add	hl, de
	ld	(hl), a
	xor	a, a
	ld	de, 4
	jq	BB4_43
BB4_46:
	ld	hl, 500
BB4_56:
	ld	(_spawnDelay), hl
BB4_57:
	ld	a, (_save_data)
	cp	a, 1
	call	__setflag
	jq	m, BB4_61
	ld	hl, _incrementDelay
	push	de
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	ld	iyl, e
	ld	iyh, d
	pop	de
	ld	a, (_scrollSpeed)
	ld	l, a
	rlc	l
	sbc	hl, hl
	ld	l, a
	ld	bc, 250
	call	__imulu
	ld	de, -1250
	add	hl, de
	cp	a, 12
	call	__setflag
	jq	p, BB4_64
	ld	de, 0
	ld	e, iyl
	ld	d, iyh
	push	hl
	pop	bc
	ex	de, hl
	or	a, a
	sbc	hl, bc
	call	__setflag
	jq	m, BB4_64
	inc	a
	ld	(_scrollSpeed), a
	ld.sis	iy, 0
	jq	BB4_65
BB4_61:
	ld	a, (_avatar+3)
	lea	bc, iy + 0
	ld	c, a
	ld	a, (_avatar+5)
	ld	iyl, a
	rlc	a
	sbc	hl, hl
	push	hl
	pop	de
	ld	e, iyl
	push	bc
	pop	hl
	or	a, a
	sbc	hl, de
	push	hl
	pop	bc
	ld	de, 185
	or	a, a
	sbc	hl, de
	call	__setflag
	jq	m, BB4_73
	ld	a, -71
	ld	(_avatar+3), a
	ld	a, (_scrollSpeed)
	ld	l, a
	or	a, a
	jq	nz, BB4_79
	ld	hl, _avatar+10
	inc	(hl)
	jq	BB4_104
BB4_64:
	inc.sis	iy
BB4_65:
	ld	hl, _incrementDelay
	push	de
	ld	e, iyl
	ld	d, iyh
	ld	(hl), e
	inc	hl
	ld	(hl), d
	pop	de
	ld	hl, -720878
	push	de
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	ld	l, e
	ld	h, d
	pop	de
	ld	a, l
	bit	5, a
	jq	nz, BB4_75
	ld	a, (_avatar+3)
	cp	a, -71
	jq	nc, BB4_69
	ld	a, (_avatar+5)
	cp	a, -11
	call	__setflag
	jq	m, BB4_69
	dec	a
	ld	(_avatar+5), a
BB4_69:
	ld	a, (_avatar+8)
	cp	a, 7
	ld	l, 8
	ld	de, 0
	jq	c, BB4_86
	ld	l, a
	inc	l
	cp	a, 11
	jq	c, BB4_86
	ld	l, 18
	jq	BB4_86
BB4_73:
	push	bc
	pop	hl
	ld	de, 20
	or	a, a
	sbc	hl, de
	call	__setflag
	jq	p, BB4_81
	ld	a, 20
	ld	(_avatar+3), a
	ld	a, iyl
	neg
	ld	(_avatar+5), a
	jq	BB4_104
BB4_75:
	ld	a, (_avatar+5)
	cp	a, 12
	call	__setflag
	jq	p, BB4_77
	inc	a
	ld	(_avatar+5), a
BB4_77:
	ld	a, (_avatar+8)
	ld	l, a
	cp	a, 7
	ld	de, 0
	jq	nc, BB4_85
	inc	l
	jq	BB4_86
BB4_79:
	dec	l
	ld	a, l
	ld	(_scrollSpeed), a
	ld	hl, _avatar+9
	inc	(hl)
	ld	a, -3
	sub	a, iyl
	ld	(_avatar+5), a
	cp	a, 3
	call	__setflag
	ld	de, 2
	jq	p, BB4_98
	ld	a, 3
	ld	(_avatar+9), a
	jq	BB4_104
BB4_81:
	ld	a, c
	ld	(_avatar+3), a
	ld	a, iyl
	cp	a, -13
	call	__setflag
	jq	m, BB4_83
	dec	iyl
	ld	a, iyl
	ld	(_avatar+5), a
BB4_83:
	ld	a, (_avatar+9)
	cp	a, 3
	jq	c, BB4_104
	xor	a, a
	ld	(_avatar+5), a
	ld	a, -71
	ld	(_avatar+3), a
	jq	BB4_104
BB4_85:
	ld	a, l
	cp	a, 7
	ld	l, 0
	jq	z, BB4_87
BB4_86:
	ld	a, l
	ld	(_avatar+8), a
BB4_87:
	ld	a, (_avatar+3)
	ld	e, a
	ld	a, (_avatar+5)
	ld	l, a
	rlc	l
	sbc	hl, hl
	push	hl
	pop	bc
	ld	c, a
	ex	de, hl
	or	a, a
	sbc	hl, bc
	push	hl
	pop	de
	ld	bc, -20
	add	hl, bc
	ld	bc, 170
	or	a, a
	sbc	hl, bc
	jq	c, BB4_91
	cp	a, 1
	call	__setflag
	ld	a, 20
	ld	e, a
	jq	p, BB4_90
	ld	a, -71
	ld	e, a
BB4_90:
	ld	a, e
	ld	(_avatar+3), a
	ld	h, 0
	ld	a, h
	ld	(_avatar+5), a
	jq	BB4_92
BB4_91:
	ld	a, e
	ld	(_avatar+3), a
	ld	h, 0
BB4_92:
	ld	a, e
	cp	a, -71
	jq	nc, BB4_95
	ld	a, 6
	jq	BB4_94
BB4_95:
	ld	a, (_avatar+6)
	ld	l, a
	cp	a, 6
	ld	e, 2
	jq	z, BB4_101
	ld	a, l
	dec	a
	cp	a, 4
	jq	c, BB4_100
	ld	a, (_avatar+7)
	neg
	ld	(_avatar+7), a
	ld	e, l
	jq	BB4_102
BB4_98:
	push	de
	pop	hl
	ld	bc, 1371
	or	a, a
	sbc	hl, bc
	jq	z, BB4_103
	ld	hl, (_barryHit_resized)
	add	hl, de
	ld	(hl), 0
	inc	de
	jq	BB4_98
BB4_100:
	ld	e, l
BB4_101:
	ld	a, (_avatar+7)
BB4_102:
	add	a, e
BB4_94:
	ld	(_avatar+6), a
	jq	BB4_117
BB4_103:
	call	_random
	ld	bc, 3
	call	__iremu
	call	__imulu
	push	hl
	pop	de
	ld	hl, _barryHit_array_data
	add	hl, de
	ld	hl, (hl)
	ld	de, (_barryHit_resized)
	ld	bc, 0
	push	bc
	ld	bc, 6
	push	bc
	push	de
	push	hl
	call	_CopyPasta
	pop	hl
	pop	hl
	pop	hl
	pop	hl
BB4_104:
	ld	iy, (_barryHit_resized)
	ld	de, (_barryHit_rotated)
	ld	a, (_avatar+4)
	ld	c, a
	ld	hl, 64
	push	hl
	push	bc
	push	de
	push	iy
	call	_gfx_RotateScaleSprite
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	ld	iy, (_jetpack_resized)
	ld	de, (_jetpack_rotated)
	ld	a, (_jetpackEntity+6)
	ld	c, a
	ld	hl, 64
	push	hl
	push	bc
	push	de
	push	iy
	call	_gfx_RotateScaleSprite
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	ld	a, (_avatar+4)
	add	a, 4
	ld	(_avatar+4), a
	ld	a, (_jetpackEntity+6)
	add	a, 8
	ld	(_jetpackEntity+6), a
	ld	a, (_jetpackEntity+3)
	ld	iyh, a
	ld	bc, 0
	ld	c, iyh
	ld	a, (_jetpackEntity+5)
	ld	iyl, a
	rlc	a
	sbc	hl, hl
	push	hl
	pop	de
	ld	e, iyl
	push	bc
	pop	hl
	or	a, a
	sbc	hl, de
	push	hl
	pop	bc
	ld	de, 210
	or	a, a
	sbc	hl, de
	call	__setflag
	jq	m, BB4_108
	ld	a, -46
	ld	(_jetpackEntity+3), a
	ld	a, (_jetpackEntity+7)
	cp	a, 3
	jq	nc, BB4_110
	inc	a
	ld	(_jetpackEntity+7), a
	ld	a, iyl
	cp	a, -6
	call	__setflag
	ld	h, 0
	jq	p, BB4_114
	ld	a, -3
	sub	a, iyl
	ld	(_jetpackEntity+5), a
	jq	BB4_115
BB4_108:
	push	bc
	pop	hl
	ld	de, 20
	or	a, a
	sbc	hl, de
	call	__setflag
	jq	p, BB4_112
	ld	a, 20
	ld	(_jetpackEntity+3), a
	ld	a, iyl
	neg
	ld	(_jetpackEntity+5), a
	jq	BB4_111
BB4_110:
	ld	a, -64
	ld	(_jetpackEntity+6), a
BB4_111:
	ld	h, 0
BB4_117:
	ld	a, (_zapperAnimate)
	ld	l, a
	inc	l
	cp	a, 11
	jq	c, BB4_119
	ld	l, h
BB4_119:
	ld	a, l
	ld	(_zapperAnimate), a
	ld	a, (_missiles+4)
	ld	l, a
	ld	c, l
	dec	c
	ld	a, (_missiles+6)
	ld	e, a
	ld	a, c
	cp	a, 4
	ld	iy, 0
	jq	c, BB4_122
	ld	a, e
	neg
	ld	e, a
	ld	(_missiles+6), a
BB4_122:
	ld	a, e
	add	a, l
	ld	(_missiles+4), a
	ld	a, (_missiles+5)
	ld	l, a
	inc	l
	cp	a, 12
	call	__setflag
	jq	m, BB4_124
	ld	l, h
BB4_124:
	ld	a, l
	ld	(_missiles+5), a
	ld	a, (_deadLasers)
	ld	c, a
	ld	a, (_laserFormation)
	lea	de, iy + 0
	ld	e, a
	ld	hl, _laserMax
	add	hl, de
	ld	l, (hl)
	ld	a, c
	cp	a, l
	jq	nc, BB4_127
	ld	a, (_scrollSpeed)
	ld	l, a
	rlc	l
	sbc	hl, hl
	ld	l, a
	ld	bc, 40
	call	__imulu
	ld	(_spawnDelay), hl
	ld	a, (_laserX)
	cp	a, 20
	call	__setflag
	jq	p, BB4_130
	inc	a
	jq	BB4_129
BB4_127:
	ld	a, (_laserX)
	cp	a, 1
	call	__setflag
	jq	m, BB4_130
	dec	a
BB4_129:
	ld	(_laserX), a
BB4_130:
	ld	a, (_laserAnimate)
	ld	l, a
	inc	l
	cp	a, 8
	call	__setflag
	jq	m, BB4_132
	ld	l, 0
BB4_132:
	ld	a, l
	ld	(_laserAnimate), a
	ld	hl, (_backgroundScroll)
	ld	de, -192
	add	hl, de
	ld	de, 0
	push	de
	push	hl
	ld	hl, _background_data
	push	hl
	call	_gfx_Sprite
	pop	hl
	pop	hl
	pop	hl
	ld	hl, (_backgroundScroll)
	ld	de, 0
	push	de
	push	hl
	ld	hl, _background_data
	push	hl
	call	_gfx_Sprite
	pop	hl
	pop	hl
	pop	hl
	ld	hl, (_backgroundScroll)
	ld	de, 192
	add	hl, de
	ld	de, 0
	push	de
	push	hl
	ld	hl, _background_data
	push	hl
	call	_gfx_Sprite
	pop	hl
	pop	hl
	pop	hl
	ld	a, (_save_data)
	cp	a, 1
	call	__setflag
	jq	m, BB4_135
	ld	a, (_avatar+6)
	srl	a
	or	a, a
	sbc	hl, hl
	ld	l, a
	ld	bc, 3
	call	__imulu
	push	hl
	pop	de
	ld	hl, _barryRun_array_data
	add	hl, de
	ld	hl, (hl)
	ld	de, (_avatar)
	ld	a, (_avatar+3)
	ld	c, a
	push	bc
	push	de
	push	hl
	call	_gfx_TransparentSprite_NoClip
	pop	hl
	pop	hl
	pop	hl
	ld	a, (_avatar+8)
	cp	a, 18
	jq	nc, BB4_141
	srl	a
	or	a, a
	sbc	hl, hl
	ld	l, a
	ld	bc, 3
	call	__imulu
	push	hl
	pop	de
	ld	hl, _exhaust_array_data
	add	hl, de
	ld	hl, (hl)
	ld	(ix + -3), hl
	ld	hl, (_avatar)
	ld	(ix + -6), hl
	call	_random
	ld	bc, 3
	call	__iremu
	push	hl
	pop	de
	ld	hl, (ix + -6)
	inc	hl
	add	hl, de
	ex	de, hl
	ld	a, (_avatar+3)
	add	a, 31
	ld	l, a
	push	hl
	push	de
	ld	hl, (ix + -3)
	push	hl
	call	_gfx_TransparentSprite_NoClip
	pop	hl
	pop	hl
	pop	hl
	ld	hl, (_avatar)
	ld	de, 4
	add	hl, de
	ld	a, (_avatar+3)
	add	a, 31
	ld	e, a
	push	de
	push	hl
	ld	hl, _nozzle_data
	jq	BB4_140
BB4_135:
	ld	a, (_avatar+9)
	cp	a, 3
	jq	c, BB4_137
	ld	hl, (_barryDed_array_data+3)
	ld	de, (_avatar)
	ld	bc, -46
	push	bc
	push	de
	push	hl
	jq	BB4_138
BB4_137:
	ld	de, (_barryHit_rotated)
	ld	hl, (_avatar)
	ld	bc, -5
	add	hl, bc
	ld	a, (_avatar+3)
	ld	c, a
	push	bc
	push	hl
	push	de
BB4_138:
	call	_gfx_TransparentSprite_NoClip
	pop	hl
	pop	hl
	pop	hl
	ld	hl, (_jetpack_rotated)
	ld	de, (_jetpackEntity)
	ld	a, (_jetpackEntity+3)
	ld	c, a
	push	bc
	push	de
BB4_140:
	push	hl
	call	_gfx_TransparentSprite_NoClip
	pop	hl
	pop	hl
	pop	hl
BB4_141:
	ld	hl, _coins
	ld	(ix + -3), hl
	ld	bc, 0
	ld	iy, 0
BB4_142:
	ld	a, (_coins+150)
	lea	de, iy + 0
	ld	e, a
	ld	hl, _coin_max
	add	hl, de
	ld	a, (hl)
	lea	de, iy + 0
	ld	e, a
	push	bc
	pop	hl
	or	a, a
	sbc	hl, de
	jq	nc, BB4_155
	ld	(ix + -6), bc
	ld	iy, (ix + -3)
	ld	bc, (iy)
	push	bc
	pop	hl
	ld	de, 831
	or	a, a
	sbc	hl, de
	jq	nc, BB4_154
	push	bc
	pop	hl
	ld	de, -11
	add	hl, de
	ld	iy, (_avatar)
	ld	(ix + -9), iy
	ld	de, 20
	add	iy, de
	lea	de, iy + 0
	or	a, a
	sbc	hl, de
	push	bc
	pop	iy
	ld	bc, (ix + -6)
	ld	(ix + -12), iy
	jq	nc, BB4_149
	ld	de, 2
	ld	hl, (ix + -9)
	add	hl, de
	lea	de, iy + 0
	dec	de
	or	a, a
	sbc	hl, de
	jq	nc, BB4_149
	ld	iy, _coins
	add	iy, bc
	ld	a, (iy + 90)
	or	a, a
	sbc	hl, hl
	push	hl
	pop	de
	ld	(ix + -21), a
	ld	e, a
	ld	a, (_avatar+3)
	ld	l, a
	push	hl
	pop	iy
	ld	bc, 36
	add	iy, bc
	ld	(ix + -18), iy
	ld	(ix + -9), de
	push	de
	pop	iy
	ld	bc, 11
	add	iy, bc
	lea	bc, iy + 0
	ld	iy, (ix + -12)
	or	a, a
	sbc	hl, bc
	ld	bc, (ix + -6)
	jq	nc, BB4_149
	ld	bc, (ix + -18)
	ld	hl, (ix + -9)
	or	a, a
	sbc	hl, bc
	ld	bc, (ix + -6)
	jq	nc, BB4_149
	ld	bc, -13
	add	iy, bc
	ld	a, (ix + -21)
	dec	a
	ld	l, a
	push	hl
	push	iy
	ld	hl, _sparkle_data
	push	hl
	call	_gfx_TransparentSprite_NoClip
	pop	hl
	pop	hl
	pop	hl
	ld	hl, 1020
	ld	iy, (ix + -3)
	ld	(iy), hl
	ld	hl, (_save_data+1)
	ld	iy, (ix + -28)
	ld	e, (iy)
	ld	bc, 1
	xor	a, a
	call	__ladd
	ld	a, e
	ld	(_save_data+1), hl
	ld	(_save_data+4), a
	jq	BB4_153
BB4_149:
	ld	iy, _coins
	add	iy, bc
	ld	(ix + -9), iy
	ld	b, (iy + 120)
	ld	l, (ix + -23)
	ld	h, (ix + -22)
	ld	c, l
	call	__bdivu
	or	a, a
	sbc	hl, hl
	ld	l, a
	ld	bc, 3
	call	__imulu
	push	hl
	pop	de
	ld	hl, _coin_array_data
	add	hl, de
	ld	bc, (hl)
	ld	de, -12
	ld	hl, (ix + -12)
	add	hl, de
	ld	iy, (ix + -9)
	ld	a, (iy + 90)
	ld	de, 0
	ld	e, a
	push	de
	push	hl
	push	bc
	call	_gfx_TransparentSprite
	ld	iy, (ix + -9)
	pop	hl
	pop	hl
	pop	hl
	ld	a, (iy + 120)
	cp	a, 38
	jq	nc, BB4_152
	ld	hl, (ix + -3)
	ld	hl, (hl)
	ld	de, 330
	or	a, a
	sbc	hl, de
	jq	nc, BB4_152
	add	a, 2
	ld	(iy + 120), a
	jq	BB4_153
BB4_152:
	ld	(iy + 120), 0
BB4_153:
	ld	a, (_scrollSpeed)
	ld	l, a
	rlc	l
	sbc	hl, hl
	push	hl
	pop	de
	ld	e, a
	ld	iy, (ix + -3)
	ld	hl, (iy)
	or	a, a
	sbc	hl, de
	ld	(iy), hl
BB4_154:
	ld	bc, (ix + -6)
	inc	bc
	lea	iy, iy + 3
	ld	(ix + -3), iy
	ld	iy, 0
	jq	BB4_142
BB4_155:
	or	a, a
	sbc	hl, hl
	push	hl
	pop	bc
BB4_156:
	push	bc
	pop	hl
	ld	de, 3
	or	a, a
	sbc	hl, de
	jq	z, BB4_176
	push	bc
	pop	hl
	ld	(ix + -9), bc
	ld	bc, 3
	call	__imulu
	ld	bc, (ix + -9)
	push	hl
	pop	de
	ld	hl, _zappers
	add	hl, de
	ld	(ix + -3), hl
	ld	hl, (hl)
	ld	de, 331
	or	a, a
	sbc	hl, de
	jq	nc, BB4_175
	ld	hl, _zappers+12
	add	hl, bc
	ex	de, hl
	ld	hl, _zappers+9
	add	hl, bc
	ld	(ix + -18), hl
	ld	hl, 16
	ld	(ix + -12), hl
	or	a, a
	sbc	hl, hl
	ld	(ix + -6), hl
	ex	de, hl
	ld	(ix + -21), hl
BB4_159:
	ld	a, (hl)
	lea	de, iy + 0
	ld	e, a
	ld	hl, (ix + -3)
	lea	bc, iy + 0
	ld	iy, (hl)
	ld	hl, (ix + -6)
	or	a, a
	sbc	hl, de
	jq	nc, BB4_161
	ld	de, -14
	add	iy, de
	ld	hl, (ix + -18)
	ld	a, (hl)
	ld	c, a
	ld	hl, (ix + -12)
	add	hl, bc
	push	hl
	push	iy
	ld	hl, _beam_data
	push	hl
	call	_gfx_TransparentSprite
	ld	iy, 0
	ld	de, (ix + -21)
	pop	hl
	pop	hl
	pop	hl
	push	de
	pop	bc
	ld	de, (ix + -6)
	inc	de
	ld	(ix + -6), de
	ld	de, 10
	ld	hl, (ix + -12)
	add	hl, de
	ld	(ix + -12), hl
	push	bc
	pop	hl
	jq	BB4_159
BB4_161:
	lea	hl, iy + 0
	ld	de, 336
	or	a, a
	sbc	hl, de
	jq	nc, BB4_171
	ld	a, (_zapperAnimate)
	ld	b, a
	ld	a, 3
	ld	c, a
	call	__bdivu
	or	a, a
	sbc	hl, hl
	ld	l, a
	ld	de, 3
	push	de
	pop	bc
	call	__imulu
	push	hl
	pop	de
	ld	hl, _zapper_array_flipped
	add	hl, de
	ld	de, (hl)
	ld	hl, -25
	push	hl
	pop	bc
	add	iy, bc
	ld	hl, (ix + -18)
	ld	a, (hl)
	or	a, a
	sbc	hl, hl
	ld	l, a
	ld	bc, -7
	add	hl, bc
	push	hl
	push	iy
	push	de
	call	_gfx_TransparentSprite
	pop	hl
	pop	hl
	pop	hl
	ld	a, (_zapperAnimate)
	ld	b, a
	ld	c, 3
	call	__bdivu
	or	a, a
	sbc	hl, hl
	ld	l, a
	ld	bc, 3
	call	__imulu
	push	hl
	pop	de
	ld	hl, _zapper_array_data
	add	hl, de
	ld	hl, (hl)
	ld	(ix + -6), hl
	ld	hl, (ix + -3)
	ld	hl, (hl)
	ld	bc, -25
	add	hl, bc
	ld	(ix + -12), hl
	ld	hl, (ix + -18)
	ld	a, (hl)
	ld	de, 0
	push	de
	pop	iy
	ld	iyl, a
	ld	bc, 7
	add	iy, bc
	ld	hl, (ix + -21)
	ld	a, (hl)
	ld	e, a
	ex	de, hl
	ld	bc, 10
	call	__imulu
	push	hl
	pop	bc
	add	iy, bc
	push	iy
	ld	hl, (ix + -12)
	push	hl
	ld	hl, (ix + -6)
	push	hl
	call	_gfx_TransparentSprite
	pop	hl
	pop	hl
	pop	hl
	ld	a, (_save_data)
	ld	hl, (ix + -3)
	ld	iy, (hl)
	cp	a, 1
	call	__setflag
	jq	m, BB4_171
	ld	(ix + -12), a
	lea	hl, iy + 0
	ld	bc, -14
	add	hl, bc
	ld	bc, (_avatar)
	lea	de, iy + 0
	ld	(ix + -6), bc
	push	bc
	pop	iy
	ld	bc, 20
	add	iy, bc
	lea	bc, iy + 0
	or	a, a
	sbc	hl, bc
	jq	nc, BB4_170
	ld	bc, 2
	ld	hl, (ix + -6)
	add	hl, bc
	push	de
	pop	iy
	ld	bc, -4
	add	iy, bc
	lea	bc, iy + 0
	or	a, a
	sbc	hl, bc
	push	de
	pop	iy
	jq	nc, BB4_171
	ld	(ix + -31), iy
	ld	a, (_avatar+3)
	ld	iy, 0
	lea	bc, iy + 0
	push	bc
	pop	de
	ld	e, a
	ld	hl, (ix + -18)
	ld	a, (hl)
	ld	iyl, a
	ld	hl, (ix + -21)
	ld	a, (hl)
	push	bc
	pop	hl
	ld	l, a
	ld	bc, 10
	call	__imulu
	ld	(ix + -6), hl
	lea	hl, iy + 0
	ld	bc, 32
	add	hl, bc
	ld	bc, (ix + -6)
	add	hl, bc
	ld	(ix + -6), hl
	ld	(ix + -18), de
	ex	de, hl
	ld	bc, 35
	add	hl, bc
	push	hl
	pop	bc
	lea	hl, iy + 0
	or	a, a
	sbc	hl, bc
	jq	nc, BB4_173
	ld	bc, (ix + -6)
	ld	hl, (ix + -18)
	or	a, a
	sbc	hl, bc
	jq	nc, BB4_173
	ld	a, (ix + -12)
	dec	a
	ld	(_save_data), a
	ld	a, 4
	ld	(_deathColor), a
BB4_173:
	ld	bc, (ix + -9)
	ld	iy, (ix + -31)
	jq	BB4_174
BB4_171:
	ld	bc, (ix + -9)
BB4_174:
	ld	a, (_scrollSpeed)
	ld	l, a
	rlc	l
	sbc	hl, hl
	push	hl
	pop	de
	ld	e, a
	lea	hl, iy + 0
	or	a, a
	sbc	hl, de
	ld	iy, (ix + -3)
	ld	(iy), hl
	ld	iy, 0
BB4_175:
	inc	bc
	jq	BB4_156
BB4_170:
	ld	bc, (ix + -9)
	push	de
	pop	iy
	jq	BB4_174
BB4_176:
	ld	a, 1
	ld	de, 0
BB4_177:
	ex	de, hl
	bit	0, a
	jq	z, BB4_195
	ld	(ix + -6), hl
	ld	bc, 3
	call	__imulu
	push	hl
	pop	de
	ld	hl, _missiles
	add	hl, de
	ld	(ix + -3), hl
	ld	iy, (hl)
	lea	hl, iy + 0
	ld	de, 1467
	or	a, a
	sbc	hl, de
	ld	a, 0
	ld	de, 1
	jq	nc, BB4_177
	lea	hl, iy + 0
	ld	de, 366
	or	a, a
	sbc	hl, de
	jq	nc, BB4_186
	ld	a, (_missiles+5)
	ld	b, a
	ld	c, 2
	call	__bdivs
	ld	l, a
	rlc	l
	sbc	hl, hl
	ld	l, a
	ld	bc, 3
	call	__imulu
	push	hl
	pop	de
	ld	hl, _missile_array_data
	add	hl, de
	ld	de, (hl)
	ld	bc, -46
	add	iy, bc
	ld	hl, _missiles+3
	ld	bc, (ix + -6)
	add	hl, bc
	ld	(ix + -6), hl
	ld	a, (hl)
	or	a, a
	sbc	hl, hl
	ld	l, a
	ld	bc, -18
	add	hl, bc
	push	hl
	push	iy
	push	de
	call	_gfx_TransparentSprite
	pop	hl
	pop	hl
	pop	hl
	ld	a, (_save_data)
	ld	e, a
	cp	a, 1
	call	__setflag
	jq	m, BB4_194
	ld	hl, (_avatar)
	ld	(ix + -9), hl
	ld	bc, 2
	add	hl, bc
	ld	iy, (ix + -3)
	ld	iy, (iy)
	ld	(ix + -12), iy
	ld	bc, -26
	add	iy, bc
	lea	bc, iy + 0
	or	a, a
	sbc	hl, bc
	jq	nc, BB4_194
	ld	bc, -45
	ld	hl, (ix + -12)
	add	hl, bc
	ld	bc, 20
	ld	iy, (ix + -9)
	add	iy, bc
	lea	bc, iy + 0
	or	a, a
	sbc	hl, bc
	jq	nc, BB4_194
	ld	hl, (ix + -6)
	ld	a, (hl)
	or	a, a
	sbc	hl, hl
	ld	l, a
	ld	(ix + -9), hl
	ld	bc, -5
	add	hl, bc
	ld	(ix + -12), hl
	ld	a, (_avatar+3)
	or	a, a
	sbc	hl, hl
	ld	l, a
	ld	(ix + -6), hl
	ld	bc, 37
	ld	iy, (ix + -6)
	add	iy, bc
	ld	(ix + -6), iy
	ld	bc, 7
	ld	iy, (ix + -9)
	add	iy, bc
	lea	bc, iy + 0
	or	a, a
	sbc	hl, bc
	jq	nc, BB4_194
	ld	bc, (ix + -6)
	ld	hl, (ix + -12)
	or	a, a
	sbc	hl, bc
	call	__setflag
	jq	p, BB4_194
	dec	e
	ld	a, e
	ld	(_save_data), a
	ld	a, 5
	ld	(_deathColor), a
	jq	BB4_194
BB4_186:
	lea	hl, iy + 0
	ld	de, 641
	or	a, a
	sbc	hl, de
	jq	nc, BB4_188
	ld	a, (_missiles+4)
	ld	b, a
	ld	c, 3
	call	__bdivs
	ld	l, a
	rlc	l
	sbc	hl, hl
	ld	l, a
	ld	bc, 3
	call	__imulu
	push	hl
	pop	de
	ld	hl, _missileIncoming_tiles_data
	add	hl, de
	ld	hl, (hl)
	ld	(ix + -9), hl
	call	_random
	ld	de, 3
	push	de
	pop	bc
	call	__iremu
	ld	bc, 280
	call	__ior
	ld	(ix + -12), hl
	ld	hl, _missiles+3
	ld	de, (ix + -6)
	add	hl, de
	ld	a, (hl)
	ld	(ix + -6), a
	call	_random
	ld	bc, 3
	call	__iremu
	ld	a, (ix + -6)
	add	a, -17
	add	a, l
	ld	l, a
	push	hl
	ld	hl, (ix + -12)
	push	hl
	ld	hl, (ix + -9)
	push	hl
	call	_gfx_TransparentSprite_NoClip
	pop	hl
	pop	hl
	pop	hl
	jq	BB4_194
BB4_188:
	lea	hl, iy + 0
	ld	de, 1466
	or	a, a
	sbc	hl, de
	jq	nc, BB4_194
	ld	a, (_missiles+4)
	ld	b, a
	ld	c, 2
	call	__bdivs
	ld	l, a
	rlc	l
	sbc	hl, hl
	ld	l, a
	ld	bc, 3
	call	__imulu
	push	hl
	pop	de
	ld	hl, _missileWarning_tiles_data
	add	hl, de
	ld	bc, (hl)
	ld	de, _missiles+3
	ex	de, hl
	ld	de, (ix + -6)
	add	hl, de
	ld	(ix + -6), hl
	ld	a, (hl)
	add	a, -11
	ld	e, a
	push	de
	ld	de, 293
	push	de
	push	bc
	call	_gfx_TransparentSprite_NoClip
	pop	hl
	pop	hl
	pop	hl
	ld	hl, (ix + -6)
	ld	a, (hl)
	ld	iy, 0
	lea	bc, iy + 0
	ld	(ix + -9), a
	ld	c, a
	ld	a, (_avatar+3)
	ld	iyl, a
	lea	hl, iy + 0
	ld	de, 20
	add	hl, de
	ex	de, hl
	push	bc
	pop	hl
	or	a, a
	sbc	hl, de
	jq	nc, BB4_191
	ld	a, (ix + -9)
	add	a, 2
	jq	BB4_193
BB4_191:
	ld	a, (ix + -9)
	ld	de, 21
	add	iy, de
	lea	hl, iy + 0
	or	a, a
	sbc	hl, bc
	jq	nc, BB4_194
	add	a, -2
BB4_193:
	ld	hl, (ix + -6)
	ld	(hl), a
BB4_194:
	ld	a, (_scrollSpeed)
	ld	l, a
	rlc	l
	sbc	hl, hl
	push	hl
	pop	bc
	ld	c, a
	ld	iy, (ix + -3)
	ld	de, (iy)
	ld	hl, -8
	or	a, a
	sbc	hl, bc
	add	hl, de
	ld	(iy), hl
	xor	a, a
	ld	de, 1
	jq	BB4_177
BB4_195:
	ld	hl, _lasers
	ld	(ix + -6), hl
	or	a, a
	sbc	hl, hl
	ld	(ix + -3), hl
	ld	iy, 0
	lea	de, iy + 0
BB4_196:
	ld	a, (_laserFormation)
	push	de
	pop	iy
	ld	e, a
	ld	hl, _laserMax
	add	hl, de
	ld	c, (hl)
	lea	de, iy + 0
	ld	e, c
	ld	hl, (ix + -3)
	or	a, a
	sbc	hl, de
	jq	nc, BB4_223
	ld	a, (_laserX)
	ld	b, a
	cp	a, 1
	call	__setflag
	lea	de, iy + 0
	ld	hl, (ix + -3)
	jq	m, BB4_213
	ld	a, (_deadLasers)
	ld	e, a
	ld	a, b
	cp	a, 20
	call	__setflag
	ld	h, 0
	jq	p, BB4_201
	ld	a, e
	cp	a, c
	jq	nc, BB4_201
	ld	a, h
	ld	(_laserAnimate), a
	ld	iy, 0
	ld	iyl, b
	ld	de, -19
	add	iy, de
	ld	hl, (ix + -6)
	ld	a, (hl)
	or	a, a
	sbc	hl, hl
	ld	l, a
	push	hl
	push	iy
	ld	hl, _powering_tile_0_data
	push	hl
	call	_gfx_TransparentSprite
	pop	hl
	pop	hl
	pop	hl
	ld	a, (_laserX)
	ld	l, a
	rlc	l
	sbc	hl, hl
	push	hl
	pop	de
	ld	e, a
	ld	hl, 320
	or	a, a
	sbc	hl, de
	ld	iy, (ix + -6)
	ld	a, (iy)
	ld	de, 0
	ld	e, a
	push	de
	push	hl
	ld	hl, _powering_tile_0_data
	push	hl
	call	_gfx_TransparentSprite
	ld	iy, (ix + -6)
	pop	hl
	pop	hl
	pop	hl
	jq	BB4_209
BB4_201:
	ld	a, e
	cp	a, c
	jq	nc, BB4_204
	ld	iy, (ix + -6)
	ld	bc, (iy + 1)
	push	bc
	pop	hl
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	nz, BB4_205
	inc	e
	ld	a, e
	ld	(_deadLasers), a
	jq	BB4_208
BB4_204:
	ld	a, h
	ld	(_laserAnimate), a
	ld	iy, (ix + -6)
	jq	BB4_209
BB4_205:
	push	bc
	pop	hl
	ld	de, 9
	or	a, a
	sbc	hl, de
	jq	nc, BB4_214
	ld	a, (_laserAnimate)
	ld	b, a
	ld	a, 3
	ld	c, a
	call	__bdivs
	ld	l, a
	rlc	l
	sbc	hl, hl
	ld	l, a
	ld	de, 3
	push	de
	pop	bc
	call	__imulu
	push	hl
	pop	de
	ld	hl, _shutdown_tiles_data
	add	hl, de
	ld	hl, (hl)
	ld	a, (iy)
	add	a, -16
	ld	e, a
	push	de
	ld	de, 5
	push	de
	push	hl
	call	_gfx_TransparentSprite_NoClip
	pop	hl
	pop	hl
	pop	hl
	ld	a, (_laserAnimate)
	ld	b, a
	ld	c, 3
	call	__bdivs
	ld	l, a
	rlc	l
	sbc	hl, hl
	ld	l, a
	ld	bc, 3
	call	__imulu
	push	hl
	pop	de
	ld	hl, _shutdown_tiles_flipped
	add	hl, de
	ld	bc, (hl)
	ld	hl, (ix + -6)
	ld	a, (hl)
	add	a, -16
	ld	e, a
	push	de
	ld	de, 285
	push	de
	push	bc
	call	_gfx_TransparentSprite_NoClip
	pop	hl
	pop	hl
	pop	hl
	ld	a, (_laserAnimate)
	ld	b, a
	ld	c, 3
	call	__bdivs
	inc	a
	ld	l, a
	rlc	l
	sbc	hl, hl
	ld	l, a
	ld	bc, 3
	call	__imulu
	push	hl
	pop	de
	ld	hl, _laser_tiles_data
	add	hl, de
	ld	bc, (hl)
	ld	hl, (ix + -6)
	ld	a, (hl)
	ld	de, 0
	ld	e, a
	push	de
	ld	de, 35
	push	de
	push	bc
	call	_gfx_RLETSprite
BB4_207:
	ld	iy, (ix + -6)
	pop	hl
	pop	hl
	pop	hl
BB4_208:
	ld	hl, (iy + 1)
	dec	hl
	ld	(iy + 1), hl
BB4_209:
	ld	hl, (ix + -3)
	ld	c, 2
	call	__ishl
	push	hl
	pop	de
	ld	hl, (iy + 1)
	ld	bc, 109
	or	a, a
	sbc	hl, bc
	jq	nc, BB4_211
	ld	hl, _lasers
	add	hl, de
	ld	(ix + -9), hl
	ld	a, (_laserAnimate)
	ld	b, a
	ld	a, 3
	ld	c, a
	call	__bdivs
	inc	a
	ld	l, a
	rlc	l
	sbc	hl, hl
	ld	l, a
	ld	de, 3
	push	de
	pop	bc
	call	__imulu
	push	hl
	pop	de
	ld	hl, _powering_tiles_data
	add	hl, de
	ld	de, (hl)
	ld	a, (_laserX)
	ld	l, a
	rlc	l
	sbc	hl, hl
	ld	l, a
	ld	bc, -19
	add	hl, bc
	ld	a, (iy)
	ld	bc, 0
	ld	c, a
	push	bc
	push	hl
	push	de
	call	_gfx_TransparentSprite
	ld	iy, (ix + -9)
	pop	hl
	pop	hl
	pop	hl
	ld	a, (_laserAnimate)
	ld	b, a
	ld	c, 3
	call	__bdivs
	inc	a
	ld	l, a
	rlc	l
	sbc	hl, hl
	ld	l, a
	ld	bc, 3
	call	__imulu
	push	hl
	pop	de
	ld	hl, _powering_tiles_flipped
	add	hl, de
	jq	BB4_212
BB4_211:
	ld	a, (_laserX)
	ld	l, a
	rlc	l
	sbc	hl, hl
	ld	l, a
	ld	de, -19
	add	hl, de
	ld	a, (iy)
	ld	de, 0
	ld	e, a
	push	de
	push	hl
	ld	hl, _powering_tile_0_data
	push	hl
	ld	(ix + -6), iy
	call	_gfx_TransparentSprite
	pop	hl
	pop	hl
	pop	hl
	ld	hl, _powering_tiles_flipped
	ld	iy, (ix + -6)
BB4_212:
	ld	de, (hl)
	ld	a, (_laserX)
	ld	l, a
	rlc	l
	sbc	hl, hl
	push	hl
	pop	bc
	ld	c, a
	ld	hl, 320
	or	a, a
	sbc	hl, bc
	ld	a, (iy)
	ld	bc, 0
	ld	c, a
	push	bc
	push	hl
	push	de
	call	_gfx_TransparentSprite
	pop	hl
	pop	hl
	pop	hl
	ld	iy, 0
	lea	de, iy + 0
	ld	hl, (ix + -3)
BB4_213:
	inc	hl
	ld	(ix + -3), hl
	ld	iy, (ix + -6)
	lea	iy, iy + 4
	ld	(ix + -6), iy
	jq	BB4_196
BB4_214:
	push	bc
	pop	hl
	ld	de, 59
	or	a, a
	sbc	hl, de
	jq	nc, BB4_221
	ld	a, (_laserAnimate)
	ld	b, a
	ld	a, 3
	ld	c, a
	call	__bdivs
	ld	l, a
	rlc	l
	sbc	hl, hl
	ld	l, a
	ld	de, 3
	push	de
	pop	bc
	call	__imulu
	push	hl
	pop	de
	ld	hl, _firing_tiles_data
	add	hl, de
	ld	hl, (hl)
	ld	a, (iy)
	add	a, -11
	ld	e, a
	push	de
	ld	de, 5
	push	de
	push	hl
	ld	(ix + -6), iy
	call	_gfx_TransparentSprite_NoClip
	pop	hl
	pop	hl
	pop	hl
	ld	a, (_laserAnimate)
	ld	b, a
	ld	c, 3
	call	__bdivs
	ld	l, a
	rlc	l
	sbc	hl, hl
	ld	l, a
	ld	bc, 3
	call	__imulu
	push	hl
	pop	de
	ld	hl, _firing_tiles_flipped
	add	hl, de
	ld	bc, (hl)
	ld	hl, (ix + -6)
	ld	a, (hl)
	add	a, -11
	ld	e, a
	push	de
	ld	de, 285
	push	de
	push	bc
	call	_gfx_TransparentSprite_NoClip
	pop	hl
	pop	hl
	pop	hl
	ld	hl, (ix + -6)
	ld	a, (hl)
	or	a, a
	sbc	hl, hl
	ld	l, a
	push	hl
	ld	hl, 35
	push	hl
	ld	hl, _laser_tile_0_data
	push	hl
	call	_gfx_RLETSprite
	pop	hl
	pop	hl
	pop	hl
	ld	a, (_save_data)
	cp	a, 1
	call	__setflag
	jq	m, BB4_219
	ld	hl, (ix + -6)
	ld	c, (hl)
	ld	de, 0
	ld	(ix + -12), a
	push	de
	pop	hl
	ld	l, c
	ld	a, (_avatar+3)
	ld	e, a
	ld	(ix + -9), de
	ld	bc, 34
	ld	iy, (ix + -9)
	add	iy, bc
	ld	(ix + -9), iy
	ld	(ix + -18), hl
	ld	bc, 12
	add	hl, bc
	push	hl
	pop	bc
	ex	de, hl
	ld	a, (ix + -12)
	or	a, a
	sbc	hl, bc
	jq	nc, BB4_219
	ld	bc, (ix + -9)
	ld	hl, (ix + -18)
	or	a, a
	sbc	hl, bc
	jq	nc, BB4_219
	dec	a
	ld	(_save_data), a
	ld	a, 5
	ld	(_deathColor), a
BB4_219:
	ld	iy, (ix + -6)
	ld	hl, (iy + 1)
	ld	de, 9
	or	a, a
	sbc	hl, de
	jq	nz, BB4_208
	xor	a, a
	ld	(_laserAnimate), a
	jq	BB4_208
BB4_221:
	push	bc
	pop	hl
	ld	de, 109
	or	a, a
	sbc	hl, de
	jq	nc, BB4_208
	ld	hl, 5
	push	hl
	call	_gfx_SetColor
	pop	hl
	ld	hl, (ix + -6)
	ld	a, (hl)
	or	a, a
	sbc	hl, hl
	ld	l, a
	ld	de, 7
	add	hl, de
	push	hl
	ld	de, 300
	push	de
	push	hl
	ld	hl, 20
	push	hl
	call	_gfx_Line
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	ld	hl, (ix + -6)
	ld	a, (hl)
	ld	iy, 0
	ld	iyl, a
	ld	de, 7
	add	iy, de
	ld	(ix + -9), iy
	ld	iy, (ix + -6)
	ld	hl, (iy + 1)
	ld	de, -50
	add	hl, de
	ld	a, 2
	ld	c, a
	call	__ishru
	ld	de, 7
	add	hl, de
	push	hl
	ld	hl, (ix + -9)
	push	hl
	ld	hl, 11
	push	hl
	call	_gfx_Circle
	pop	hl
	pop	hl
	pop	hl
	ld	hl, (ix + -6)
	ld	a, (hl)
	ld	iy, 0
	ld	iyl, a
	ld	de, 7
	add	iy, de
	ld	(ix + -9), iy
	ld	iy, (ix + -6)
	ld	hl, (iy + 1)
	ld	de, -50
	add	hl, de
	ld	c, 2
	call	__ishru
	ld	de, 7
	add	hl, de
	push	hl
	ld	hl, (ix + -9)
	push	hl
	ld	hl, 308
	push	hl
	call	_gfx_Circle
	jq	BB4_207
BB4_223:
	ld	hl, (_save_data+13)
	ld	(ix + -3), hl
	ld	a, (_save_data+16)
	ld	d, a
	ld	a, (_scrollSpeed)
	ld	l, a
	rlc	l
	sbc	hl, hl
	push	hl
	pop	bc
	ld	c, a
	push	bc
	pop	hl
	push	bc
	pop	iy
	add	iy, iy
	sbc	hl, hl
	ld	(ix + -6), hl
	ld	hl, (_save_data+9)
	ld	iy, (ix + -15)
	ld	e, (iy)
	ld	iy, (ix + -6)
	ld	a, iyl
	call	__ladd
	ld	(_save_data+9), hl
	ld	a, e
	ld	(_save_data+12), a
	ld	bc, 15
	xor	a, a
	call	__ldivu
	push	hl
	pop	bc
	ld	a, e
	ld	hl, (ix + -3)
	ld	e, d
	call	__lcmpu
	jq	nc, BB4_225
	ld	(_save_data+13), bc
	ld	(_save_data+16), a
BB4_225:
	ld	hl, 4
	push	hl
	call	_gfx_SetTextFGColor
	pop	hl
	ld	hl, 1
	push	hl
	push	hl
	call	_gfx_SetTextScale
	pop	hl
	pop	hl
	ld	hl, 41
	push	hl
	ld	hl, 10
	push	hl
	call	_gfx_SetTextXY
	pop	hl
	pop	hl
	ld	hl, (_save_data+1)
	ld	de, 3
	push	de
	push	hl
	call	_gfx_PrintInt
	pop	hl
	pop	hl
	ld	hl, 3
	push	hl
	call	_gfx_SetTextFGColor
	pop	hl
	ld	hl, 29
	push	hl
	ld	hl, 10
	push	hl
	ld	hl, L_.str.3
	push	hl
	call	_gfx_PrintStringXY
	pop	hl
	pop	hl
	pop	hl
	ld	hl, 29
	push	hl
	ld	hl, 50
	push	hl
	call	_gfx_SetTextXY
	pop	hl
	pop	hl
	ld	hl, (_save_data+13)
	ld	de, 1
	push	de
	push	hl
	call	_gfx_PrintInt
	pop	hl
	pop	hl
	ld	hl, 10
	push	hl
	ld	hl, 280
	push	hl
	call	_gfx_SetTextXY
	pop	hl
	pop	hl
	ld	a, (_FPS_count)
	or	a, a
	sbc	hl, hl
	ld	l, a
	ld	de, 1
	push	de
	push	hl
	call	_gfx_PrintInt
	pop	hl
	pop	hl
	ld	hl, 2
	push	hl
	push	hl
	call	_gfx_SetTextScale
	pop	hl
	pop	hl
	ld	hl, 10
	push	hl
	push	hl
	call	_gfx_SetTextXY
	pop	hl
	pop	hl
	ld	hl, (_save_data+9)
	ld	a, (_save_data+12)
	ld	e, a
	ld	bc, 15
	xor	a, a
	call	__ldivu
	ld	de, 4
	push	de
	push	hl
	call	_gfx_PrintInt
	pop	hl
	pop	hl
	call	_gfx_SwapDraw
	ld	a, (_deathColor)
	ld	l, a
	or	a, a
	jq	z, BB4_227
	ld	a, (_avatar+3)
	add	a, 7
	ld	(_jetpackEntity+3), a
	ld	de, (_avatar)
	ld	(_jetpackEntity), de
	ld	a, (_avatar+5)
	add	a, 2
	ld	(_jetpackEntity+5), a
	push	hl
	call	_gfx_FillScreen
	pop	hl
	call	_gfx_SwapDraw
	ld	hl, 80
	push	hl
	call	_delay
	pop	hl
	call	_gfx_SwapDraw
	xor	a, a
	ld	(_deathColor), a
BB4_227:
	ld	hl, -917504
	push	hl
	pop	iy
	ld	bc, (iy)
	ld	a, (iy + 3)
	ld	hl, 32768
	ld	e, 0
	call	__ldivu
	ld	a, l
	ld	(_FPS_count), a
	ld	bc, 255
	call	__iand
	push	hl
	pop	bc
	ld	a, c
	cp	a, 26
	jq	c, BB4_229
	ld.sis	hl, 1000
	call	__sdivu
	ld	e, l
	ld	d, h
	ld.sis	hl, 40
	or	a, a
	sbc.sis	hl, de
	push	hl
	call	_delay
	pop	hl
BB4_229:
	ld	hl, -720878
	push	de
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	ld	l, e
	ld	h, d
	pop	de
	ld	a, l
	cp	a, 0
	call	__setflag
	jq	m, BB4_232
BB4_230:
	or	a, a
	sbc	hl, hl
	ld	de, -917504
	push	de
	pop	iy
	ld	(iy), hl
	xor	a, a
	ld	(iy + 3), a
	ld	hl, -720868
	push	de
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	ld	l, e
	ld	h, d
	pop	de
	ld	a, (_avatar+10)
	bit	6, l
	jq	nz, BB4_261
	cp	a, 50
	jq	nz, BB4_26
	jq	BB4_261
BB4_232:
	ld	hl, 6
	push	hl
	call	_gfx_FillScreen
	pop	hl
	or	a, a
	sbc	hl, hl
	push	hl
	call	_draw_button
	pop	hl
	ld	hl, 1
	push	hl
	call	_draw_button
	pop	hl
	ld	hl, 2
	push	hl
	call	_draw_button
	pop	hl
	ld	hl, 2
	push	hl
	call	_gfx_SetColor
	pop	hl
	ld	hl, 52
	push	hl
	ld	hl, 182
	push	hl
	ld	hl, 32
	push	hl
	ld	hl, 69
	push	hl
	call	_gfx_Rectangle
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	xor	a, a
	ld	(_debounced), a
	ld	(_menuSelect), a
BB4_233:
	ld	hl, -720868
	push	de
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	ld	l, e
	ld	h, d
	pop	de
	ld	a, l
	bit	6, a
	jq	nz, BB4_258
	call	_kb_Scan
	ld	iy, -720866
	ld	l, (iy)
	ld	h, (iy + 1)
	ld.sis	bc, 1
	call	__sand
	ld	a, l
	ld	l, 1
	xor	a, l
	xor	a, l
	bit	0, a
	jq	nz, BB4_239
	ld	l, (iy)
	ld	h, (iy + 1)
	ld	a, l
	bit	3, a
	jq	nz, BB4_239
	ld	hl, -720878
	push	de
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	ld	l, e
	ld	h, d
	pop	de
	ld	a, l
	bit	5, a
	jq	nz, BB4_248
	ld	hl, -720868
	push	de
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	ld	l, e
	ld	h, d
	pop	de
	ld.sis	bc, 1
	call	__sand
	ld	a, l
	ld	l, 1
	xor	a, l
	bit	0, a
	jq	z, BB4_248
	ld	a, (_debounced)
	ld	l, 1
	xor	a, l
	xor	a, l
	bit	0, a
	jq	z, BB4_253
	jq	BB4_258
BB4_239:
	xor	a, a
	ld	(_debounced), a
	ld	hl, 6
	push	hl
	call	_gfx_SetColor
	pop	hl
	ld	a, (_menuSelect)
	ld	l, a
	rlc	l
	sbc	hl, hl
	ld	l, a
	ld	bc, 60
	call	__imulu
	ld	de, 32
	add	hl, de
	ld	de, 52
	push	de
	ld	de, 182
	push	de
	push	hl
	ld	hl, 69
	push	hl
	call	_gfx_Rectangle
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	ld	a, (_menuSelect)
	ld	l, a
	push	hl
	call	_draw_button
	ld	iy, -720866
	pop	hl
	ld	l, (iy)
	ld	h, (iy + 1)
	ld.sis	bc, 1
	call	__sand
	ld	a, l
	ld	l, 1
	xor	a, l
	bit	0, a
	jq	nz, BB4_243
	ld	a, (_menuSelect)
	ld	l, a
	inc	l
	cp	a, 2
	call	__setflag
	ld	a, 0
	jq	p, BB4_242
	ld	a, l
BB4_242:
	ld	(_menuSelect), a
BB4_243:
	ld	l, (iy)
	ld	h, (iy + 1)
	ld	a, l
	bit	3, a
	jq	z, BB4_247
	ld	a, (_menuSelect)
	ld	l, a
	dec	l
	cp	a, 1
	call	__setflag
	ld	a, 2
	jq	m, BB4_246
	ld	a, l
BB4_246:
	ld	(_menuSelect), a
BB4_247:
	ld	hl, 2
	push	hl
	call	_gfx_SetColor
	pop	hl
	ld	a, (_menuSelect)
	ld	l, a
	rlc	l
	sbc	hl, hl
	ld	l, a
	ld	bc, 60
	call	__imulu
	ld	de, 32
	add	hl, de
	ld	de, 52
	push	de
	ld	de, 182
	push	de
	push	hl
	ld	hl, 69
	push	hl
	call	_gfx_Rectangle
	pop	hl
	jq	BB4_252
BB4_248:
	ld	a, 1
	ld	(_debounced), a
	ld	hl, 6
	push	hl
	call	_gfx_SetColor
	pop	hl
	ld	a, (_menuSelect)
	ld	l, a
	rlc	l
	sbc	hl, hl
	ld	l, a
	ld	bc, 60
	call	__imulu
	ld	de, 32
	add	hl, de
	ld	de, 52
	push	de
	ld	de, 182
	push	de
	push	hl
	ld	hl, 69
	push	hl
	call	_gfx_FillRectangle
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	ld	a, (_menuSelect)
	ld	d, a
	rlc	a
	sbc	hl, hl
	ld	l, d
	ld	bc, 3
	call	__imulu
	push	hl
	pop	bc
	ld	hl, _pauseButtonOff_tiles_data
	add	hl, bc
	ld	hl, (hl)
	ld	c, (ix + -25)
	ld	b, (ix + -24)
	ld	e, c
	mlt	de
	ld	a, e
	add	a, 35
	ld	e, a
	push	de
	ld	de, 80
	push	de
	push	hl
	call	_gfx_Sprite_NoClip
	pop	hl
	pop	hl
	pop	hl
	ld	a, (_menuSelect)
	ld	h, a
	ld	e, (ix + -25)
	ld	d, (ix + -24)
	ld	l, e
	mlt	hl
	ld	a, l
	add	a, 35
	ld	l, a
	push	hl
	ld	hl, 220
	push	hl
	ld	hl, _pauseButtonOff_tile_4_data
	push	hl
	call	_gfx_Sprite_NoClip
	pop	hl
	pop	hl
	pop	hl
	or	a, a
	sbc	hl, hl
BB4_249:
	ld	bc, 255
	call	__iand
	ld	a, l
	cp	a, 120
	jq	nc, BB4_251
	ld	(ix + -3), hl
	ld	hl, (ix + -3)
	ld	de, 100
	add	hl, de
	ld	a, (_menuSelect)
	ld	e, (ix + -25)
	ld	d, (ix + -24)
	ld	d, a
	ld	(ix + -25), e
	ld	(ix + -24), d
	mlt	de
	ld	a, e
	add	a, 35
	ld	e, a
	push	de
	push	hl
	ld	hl, _pauseButtonOff_tile_3_data
	push	hl
	call	_gfx_Sprite_NoClip
	pop	hl
	pop	hl
	pop	hl
	ld	hl, (ix + -3)
	ld	de, 20
	add	hl, de
	jq	BB4_249
BB4_251:
	ld	hl, 2
	push	hl
	call	_gfx_SetColor
	pop	hl
	ld	a, (_menuSelect)
	ld	l, a
	rlc	l
	sbc	hl, hl
	ld	l, a
	ld	de, 60
	push	de
	pop	bc
	call	__imulu
	ld	de, 34
	add	hl, de
	ld	de, 48
	push	de
	ld	de, 162
	push	de
	push	hl
	ld	hl, 79
	push	hl
	call	_gfx_Rectangle
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	ld	a, (_menuSelect)
	ld	l, a
	rlc	l
	sbc	hl, hl
	push	hl
	pop	de
	ld	e, a
	push	de
	pop	hl
	ld	bc, 7
	call	__imulu
	push	hl
	pop	bc
	ld	hl, _pauseOptions
	add	hl, bc
	ld	(ix + -3), hl
	ld	hl, _pauseOptionX
	add	hl, de
	ld	a, (hl)
	ld	l, a
	rlc	l
	sbc	hl, hl
	push	hl
	pop	iy
	ld	iyl, a
	ex	de, hl
	ld	bc, 60
	call	__imulu
	ld	de, 47
	add	hl, de
	push	hl
	push	iy
	ld	hl, (ix + -3)
	push	hl
	call	_gfx_PrintStringXY
BB4_252:
	pop	hl
	pop	hl
	pop	hl
BB4_253:
	ld	hl, 1
	push	hl
	call	_gfx_Blit
	pop	hl
	ld	hl, -720866
BB4_254:
	push	de
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	ld	l, e
	ld	h, d
	pop	de
	ld.sis	bc, 1
	call	__sand
	ld	a, l
	ld	l, 1
	xor	a, l
	xor	a, l
	bit	0, a
	jq	nz, BB4_256
	ld	hl, -720866
	push	de
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	ld	l, e
	ld	h, d
	pop	de
	ld	a, l
	bit	3, a
	jq	z, BB4_233
BB4_256:
	ld	hl, -720868
	push	de
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	ld	l, e
	ld	h, d
	pop	de
	ld	a, l
	bit	6, a
	jq	nz, BB4_233
	call	_kb_Scan
	ld	hl, -720866
	jq	BB4_254
BB4_258:
	ld	a, (_menuSelect)
	ld	l, a
	or	a, a
	jq	z, BB4_262
	ld	a, l
	cp	a, 1
	jq	nz, BB4_230
	jq	BB4_260
BB4_112:
	ld	a, (_jetpackEntity+4)
	ld	l, a
	rlc	l
	sbc	hl, hl
	push	hl
	pop	bc
	ld	c, a
	ld	hl, (_jetpackEntity)
	add	hl, bc
	ld	(_jetpackEntity), hl
	ld	a, iyh
	sub	a, iyl
	ld	(_jetpackEntity+3), a
	ld	a, iyl
	cp	a, -11
	call	__setflag
	ld	h, 0
	jq	m, BB4_117
	dec	iyl
	ld	a, iyl
	ld	(_jetpackEntity+5), a
	jq	BB4_117
BB4_114:
	ld	a, h
	ld	(_jetpackEntity+5), a
	ld	a, 3
	ld	(_jetpackEntity+7), a
BB4_115:
	ld	a, (_jetpackEntity+4)
	ld	l, a
	or	a, a
	jq	z, BB4_117
	dec	l
	ld	a, l
	ld	(_jetpackEntity+4), a
	jq	BB4_117
BB4_47:
	ex	de, hl
	ld	de, 21
	or	a, a
	sbc	hl, de
	ld	iy, 0
	jq	nc, BB4_57
	xor	a, a
BB4_49:
	cp	a, 3
	jq	nc, BB4_55
	lea	hl, iy + 0
	ld	l, a
	ld	(ix + -3), hl
	ld	bc, 3
	call	__imulu
	push	hl
	pop	de
	ld	iy, _zappers
	add	iy, de
	ld	hl, (iy)
	ld	de, 331
	or	a, a
	sbc	hl, de
	jq	c, BB4_52
	ld	hl, 330
	ld	(iy), hl
	call	_random
	ld	bc, 3
	call	__iremu
	ld	a, l
	add	a, 2
	ld	hl, _zappers+12
	ld	de, (ix + -3)
	add	hl, de
	ld	(ix + -6), hl
	ld	(hl), a
	call	_random
	push	hl
	pop	de
	ld	hl, (ix + -6)
	ld	a, (hl)
	ld	bc, 0
	ld	c, a
	ld	hl, 18
	or	a, a
	sbc	hl, bc
	push	hl
	pop	bc
	ex	de, hl
	call	__iremu
	ld	h, l
	ld	e, (ix + -23)
	ld	d, (ix + -22)
	ld	l, e
	mlt	hl
	ld	a, l
	add	a, 20
	ld	hl, _zappers+9
	ld	de, (ix + -3)
	add	hl, de
	ld	(hl), a
	ld	a, 3
BB4_52:
	inc	a
	ld	iy, 0
	jq	BB4_49
BB4_53:
	ld	hl, 1466
	ld	(_missileDelay), hl
	jq	BB4_54
BB4_55:
	ld	hl, 200
	jq	BB4_56
BB4_260:
	or	a, a
	sbc	hl, hl
	ld	(_save_data+9), hl
	xor	a, a
	ld	(_save_data+12), a
	ld	e, a
	jq	BB4_22
BB4_261:
	ld	a, (_save_data)
	jq	BB4_263
BB4_262:
	ld	l, 1
	ld	a, l
	ld	(_save_data), a
	ld	de, 0
	ld	(_save_data+9), de
	xor	a, a
	ld	(_save_data+12), a
	ld	a, l
BB4_263:
	ld	hl, -720868
	push	de
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	ld	l, e
	ld	h, d
	pop	de
	bit	6, l
	jq	nz, BB4_271
	cp	a, 1
	call	__setflag
	jq	p, BB4_271
	or	a, a
	sbc	hl, hl
	ld	(_save_data+9), hl
	xor	a, a
	ld	(_save_data+12), a
	inc	hl
	push	hl
	call	_gfx_FillScreen
	pop	hl
	ld	hl, 3
	push	hl
	push	hl
	call	_gfx_SetTextScale
	pop	hl
	pop	hl
	ld	hl, 70
	push	hl
	ld	hl, 15
	push	hl
	ld	hl, L_.str.4
	push	hl
	call	_gfx_PrintStringXY
	pop	hl
	pop	hl
	pop	hl
	ld	hl, 130
	push	hl
	ld	hl, 15
	push	hl
	ld	hl, L_.str.5
	push	hl
	call	_gfx_PrintStringXY
	pop	hl
	pop	hl
	pop	hl
	ld	hl, 160
	push	hl
	ld	hl, 15
	push	hl
	ld	hl, L_.str.6
	push	hl
	call	_gfx_PrintStringXY
	pop	hl
	pop	hl
	pop	hl
	call	_gfx_SwapDraw
BB4_266:
	call	_kb_AnyKey
	or	a, a
	jq	z, BB4_269
	call	_kb_Scan
	jq	BB4_266
BB4_268:
	call	_kb_Scan
BB4_269:
	call	_kb_AnyKey
	or	a, a
	jq	z, BB4_268
	ld	hl, -720868
	push	de
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	ld	l, e
	ld	h, d
	pop	de
	ld	a, l
	cp	a, 64
	jq	nz, BB4_21
BB4_271:
	call	_save_state
	call	_gfx_End
	ld	sp, ix
	pop	ix
	jp	_ti_CloseAll
	section	.text,"ax",@progbits

	section	.rodata,"a",@progbits
	public	_coin_max
_coin_max:
	db	"",036o,025o,030o,032o,021o,036o

	section	.rodata,"a",@progbits
	public	_ctx
_ctx:
	dl	0
	dl	12
	dl	24
	dl	36
	dl	48
	dl	60
	dl	72
	dl	84
	dl	96
	dl	108
	dl	0
	dl	12
	dl	24
	dl	36
	dl	48
	dl	60
	dl	72
	dl	84
	dl	96
	dl	108
	dl	0
	dl	12
	dl	24
	dl	36
	dl	48
	dl	60
	dl	72
	dl	84
	dl	96
	dl	108
	dl	0
	dl	24
	dl	48
	dl	60
	dl	0
	dl	24
	dl	48
	dl	72
	dl	0
	dl	12
	dl	24
	dl	48
	dl	60
	dl	0
	dl	24
	dl	48
	dl	72
	dl	0
	dl	24
	dl	48
	dl	60
	db	27 dup 0
	dl	0
	dl	12
	dl	72
	dl	84
	dl	144
	dl	156
	dl	0
	dl	12
	dl	36
	dl	48
	dl	72
	dl	84
	dl	108
	dl	120
	dl	144
	dl	156
	dl	180
	dl	192
	dl	36
	dl	48
	dl	108
	dl	120
	dl	180
	dl	192
	dl	0
	dl	0
	dl	0
	dl	0
	dl	0
	dl	0
	dl	84
	dl	84
	dl	96
	dl	0
	dl	12
	dl	24
	dl	36
	dl	48
	dl	60
	dl	72
	dl	84
	dl	96
	dl	108
	dl	0
	dl	12
	dl	24
	dl	36
	dl	48
	dl	60
	dl	72
	dl	84
	dl	96
	dl	108
	dl	84
	dl	96
	dl	84
	dl	0
	dl	0
	dl	0
	dl	0
	dl	24
	dl	12
	dl	24
	dl	36
	dl	48
	dl	0
	dl	24
	dl	12
	dl	24
	dl	36
	dl	24
	dl	48
	dl	0
	dl	12
	dl	24
	dl	36
	dl	24
	db	39 dup 0
	dl	0
	dl	24
	dl	48
	dl	72
	dl	96
	dl	12
	dl	36
	dl	60
	dl	84
	dl	108
	dl	0
	dl	24
	dl	48
	dl	72
	dl	96
	dl	12
	dl	36
	dl	60
	dl	84
	dl	108
	dl	0
	dl	24
	dl	48
	dl	72
	dl	96
	dl	12
	dl	36
	dl	60
	dl	84
	dl	108

	section	.rodata,"a",@progbits
	public	_cty
_cty:
	db	"",000o,000o,000o,000o,000o,000o,000o,000o,000o,000o,014o,014o,014o,014o,014o,014o,014o,014o,014o,014o,030o,030o,030o,030o,030o,030o,030o,030o,030o,030o
	db	"",000o,000o,000o,000o,014o,014o,014o,014o,030o,030o,030o,030o,030o,"$$$$0000"
	db	9 dup 0
	db	"",000o,000o,000o,000o,000o,000o,014o,014o,014o,014o,014o,014o,014o,014o,014o,014o,014o,014o,030o,030o,030o,030o,030o,030o,000o,000o,000o,000o,000o,000o
	db	"",000o,014o,014o,030o,030o,030o,030o,030o,030o,030o,030o,030o,030o,"$$$$$$$$$$00<",000o,000o,000o,000o
	db	"",000o,014o,014o,014o,014o,030o,030o,"$$$00<<<<H"
	db	13 dup 0
	db	"",000o,000o,000o,000o,000o,014o,014o,014o,014o,014o,030o,030o,030o,030o,030o,"$$$$$00000<<<<<"

	section	.rodata,"a",@progbits
	public	_laserMax
_laserMax:
	db	"",001o,002o,004o,004o,007o

	section	.rodata,"a",@progbits
	public	_lsrY
_lsrY:
	db	"r",000o,000o,000o,000o,000o,000o
	db	"",030o,314o,000o,000o,000o,000o,000o
	db	"",030o,220o,256o,314o,000o,000o,000o
	db	"",030o,"6T",314o,000o,000o,000o
	db	"",030o,"6Tr",220o,256o,314o

	section	.rodata,"a",@progbits
	public	_halfLife
_halfLife:
	db	"l",000o,000o,000o,000o,000o,000o
	db	"ll",000o,000o,000o,000o,000o
	db	"llll",000o,000o,000o
	db	"llll",000o,000o,000o
	db	"ll",330o,330o,330o,"ll"

	section	.data,"aw",@progbits
	public	_barryRun_array_data
_barryRun_array_data:
	dl	_barry0_data
	dl	_barry1_data
	dl	_barry2_data
	dl	_barry3_data

	section	.data,"aw",@progbits
	public	_barryHit_array_data
_barryHit_array_data:
	dl	_barryHit0_data
	dl	_barryHit1_data
	dl	_barryHit2_data

	section	.data,"aw",@progbits
	public	_barryDed_array_data
_barryDed_array_data:
	dl	_barryDed0_data
	dl	_barryDed1_data
	dl	_barryDed2_data

	section	.data,"aw",@progbits
	public	_exhaust_array_data
_exhaust_array_data:
	dl	_exhaust0_data
	dl	_exhaust1_data
	dl	_exhaust2_data
	dl	_exhaust3_data
	dl	_exhaust4_data
	dl	_exhaust5_data

	section	.data,"aw",@progbits
	public	_coin_array_data
_coin_array_data:
	dl	_coin0_data
	dl	_coin1_data
	dl	_coin2_data
	dl	_coin3_data

	section	.data,"aw",@progbits
	public	_zapper_array_data
_zapper_array_data:
	dl	_zapper0_data
	dl	_zapper1_data
	dl	_zapper2_data
	dl	_zapper3_data

	section	.data,"aw",@progbits
	public	_missile_array_data
_missile_array_data:
	dl	_missile0_data
	dl	_missile1_data
	dl	_missile2_data
	dl	_missile3_data
	dl	_missile4_data
	dl	_missile5_data
	dl	_missile6_data

	section	.data,"aw",@progbits
	public	_spawnDelay
_spawnDelay:
	dl	200

	section	.data,"aw",@progbits
	public	_pauseOptions
_pauseOptions:
	db	"Quit",000o,000o,000o
	db	"Retry",000o,000o
	db	"Resume",000o

	section	.data,"aw",@progbits
	public	_pauseOptionX
_pauseOptionX:
	db	"xgZ"

	section	.bss,"aw",@nobits
	public	_coins
_coins:
	rb	151

	section	.bss,"aw",@nobits
	public	_zappers
_zappers:
	rb	15

	section	.bss,"aw",@nobits
	public	_missiles
_missiles:
	rb	7

	section	.bss,"aw",@nobits
	public	_laserX
_laserX:
	rb	1

	section	.rodata,"a",@progbits
	private	L_.str
L_.str:
	db	"JTPKDAT",000o

	section	.rodata,"a",@progbits
	private	L_.str.1
L_.str.1:
	db	"w",000o

	section	.bss,"aw",@nobits
	public	_savegame
_savegame:
	rb	1

	section	.bss,"aw",@nobits
	public	_save_data
_save_data:
	rb	17

	section	.bss,"aw",@nobits
	public	_scrollSpeed
_scrollSpeed:
	rb	1

	section	.bss,"aw",@nobits
	public	_incrementDelay
_incrementDelay:
	rb	2

	section	.bss,"aw",@nobits
	public	_backgroundScroll
_backgroundScroll:
	rb	3

	section	.bss,"aw",@nobits
	public	_avatar
_avatar:
	rb	11

	section	.bss,"aw",@nobits
	public	_jetpackEntity
_jetpackEntity:
	rb	8

	section	.bss,"aw",@nobits
	public	_zapperAnimate
_zapperAnimate:
	rb	1

	section	.bss,"aw",@nobits
	public	_lasers
_lasers:
	rb	28

	section	.bss,"aw",@nobits
	public	_laserFormation
_laserFormation:
	rb	1

	section	.bss,"aw",@nobits
	public	_deadLasers
_deadLasers:
	rb	1

	section	.bss,"aw",@nobits
	public	_laserAnimate
_laserAnimate:
	rb	1

	section	.rodata,"a",@progbits
	private	L_.str.2
L_.str.2:
	db	"r",000o

	section	.bss,"aw",@nobits
	public	_barryHit_resized
_barryHit_resized:
	rb	3

	section	.bss,"aw",@nobits
	public	_barryHit_rotated
_barryHit_rotated:
	rb	3

	section	.bss,"aw",@nobits
	public	_jetpack_resized
_jetpack_resized:
	rb	3

	section	.bss,"aw",@nobits
	public	_jetpack_rotated
_jetpack_rotated:
	rb	3

	section	.bss,"aw",@nobits
	public	_zapper_array_flipped
_zapper_array_flipped:
	rb	12

	section	.bss,"aw",@nobits
	public	_powering_tiles_flipped
_powering_tiles_flipped:
	rb	12

	section	.bss,"aw",@nobits
	public	_firing_tiles_flipped
_firing_tiles_flipped:
	rb	9

	section	.bss,"aw",@nobits
	public	_shutdown_tiles_flipped
_shutdown_tiles_flipped:
	rb	9

	section	.bss,"aw",@nobits
	public	_randObject
_randObject:
	rb	1

	section	.bss,"aw",@nobits
	public	_randVar
_randVar:
	rb	1

	section	.bss,"aw",@nobits
	public	_missileDelay
_missileDelay:
	rb	3

	section	.bss,"aw",@nobits
	public	_deathColor
_deathColor:
	rb	1

	section	.rodata,"a",@progbits
	private	L_.str.3
L_.str.3:
	db	"BEST:",000o

	section	.bss,"aw",@nobits
	public	_FPS_count
_FPS_count:
	rb	1

	section	.bss,"aw",@nobits
	public	_debounced
_debounced:
	rb	1

	section	.bss,"aw",@nobits
	public	_menuSelect
_menuSelect:
	rb	1

	section	.rodata,"a",@progbits
	private	L_.str.4
L_.str.4:
	db	"Congration!",000o

	section	.rodata,"a",@progbits
	private	L_.str.5
L_.str.5:
	db	"You recieved:",000o

	section	.rodata,"a",@progbits
	private	L_.str.6
L_.str.6:
	db	"Death",000o

	section	.bss,"aw",@nobits
	public	_randVar1
_randVar1:
	rb	1

	ident	"clang version 12.0.0 (https://github.com/jacobly0/llvm-project 170be88120e3aa88c20eea5615ba76b8f1d6c647)"
	extern	_random
	extern	_powering_tiles_data
	extern	_missileIncoming_tiles_data
	extern	__Unwind_SjLj_Register
	extern	__ldivu
	extern	_barryHit2_data
	extern	_coin1_data
	extern	_srand
	extern	_malloc
	extern	_zapper3_data
	extern	_gfx_SetTextFGColor
	extern	_gfx_Begin
	extern	__lcmpzero
	extern	_gfx_Line
	extern	_zapper0_data
	extern	_gfx_SetPalette
	extern	_pauseButtonOn_tile_4_data
	extern	_laser_tile_0_data
	extern	_powering_tile_0_data
	extern	_missile4_data
	extern	__sand
	extern	_memcpy
	extern	__ladd
	extern	_shutdown_tiles_data
	extern	_laser_tiles_data
	extern	_ti_Read
	extern	_barryDed2_data
	extern	_background_data
	extern	_gfx_PrintInt
	extern	__ishl
	extern	__idivu
	extern	_missile1_data
	extern	_exhaust4_data
	extern	__setflag
	extern	_barry2_data
	extern	_sparkle_data
	extern	__iand
	extern	_nozzle_data
	extern	_gfx_Blit
	extern	_gfx_FillRectangle
	extern	_gfx_Circle
	extern	_gfx_AllocSprite
	extern	_exhaust1_data
	extern	_ti_Open
	extern	_gfx_Sprite
	extern	_coin2_data
	extern	_delay
	extern	_gfx_Sprite_NoClip
	extern	_pauseButtonOff_tile_3_data
	extern	_barryHit0_data
	extern	_zapper1_data
	extern	_firing_tiles_data
	extern	__bdivu
	extern	__bdivs
	extern	_missile5_data
	extern	_barry3_data
	extern	_jetpack_palette
	extern	_gfx_RLETSprite
	extern	__frameset
	extern	_gfx_SetTransparentColor
	extern	_exhaust5_data
	extern	_missile2_data
	extern	_exhaust2_data
	extern	_kb_Scan
	extern	_gfx_RotateScaleSprite
	extern	_missileWarning_tiles_data
	extern	_ti_Write
	extern	__ior
	extern	_pauseButtonOff_tiles_data
	extern	_coin3_data
	extern	_gfx_FlipSpriteX
	extern	_gfx_FlipSpriteY
	extern	__ishru
	extern	_gfx_SwapDraw
	extern	_pauseButtonOff_tile_4_data
	extern	_barryHit1_data
	extern	_gfx_SetDraw
	extern	_barry0_data
	extern	__sdivu
	extern	_ti_CloseAll
	extern	_gfx_FillScreen
	extern	__Unwind_SjLj_Unregister
	extern	_barryDed0_data
	extern	_zapper2_data
	extern	__iremu
	extern	_missile6_data
	extern	_coin0_data
	extern	__imulu
	extern	_pauseButtonOn_tile_3_data
	extern	_gfx_SetColor
	extern	_gfx_Rectangle
	extern	_kb_AnyKey
	extern	_barry1_data
	extern	_missile3_data
	extern	_beam_data
	extern	_gfx_TransparentSprite_NoClip
	extern	_exhaust3_data
	extern	_barryDed1_data
	extern	_gfx_PrintStringXY
	extern	_gfx_End
	extern	_missile0_data
	extern	__lcmpu
	extern	_gfx_SetTextXY
	extern	_exhaust0_data
	extern	_pauseButtonOn_tiles_data
	extern	_gfx_TransparentSprite
	extern	_jetpack_data
	extern	_gfx_SetTextScale
